// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: webuimessages_gamerecording.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ETimelineEntryType int32

const (
	ETimelineEntryType_k_ETimelineEntryType_Invalid          ETimelineEntryType = 0
	ETimelineEntryType_k_ETimelineEntryType_GameMode         ETimelineEntryType = 1
	ETimelineEntryType_k_ETimelineEntryType_Event            ETimelineEntryType = 2
	ETimelineEntryType_k_ETimelineEntryType_StateDescription ETimelineEntryType = 3
	ETimelineEntryType_k_ETimelineEntryType_Achievement      ETimelineEntryType = 4
	ETimelineEntryType_k_ETimelineEntryType_UserMarker       ETimelineEntryType = 5
	ETimelineEntryType_k_ETimelineEntryType_Screenshot       ETimelineEntryType = 6
	ETimelineEntryType_k_ETimelineEntryType_Error            ETimelineEntryType = 7
	ETimelineEntryType_k_ETimelineEntryType_Tag              ETimelineEntryType = 8
	ETimelineEntryType_k_ETimelineEntryType_GamePhase        ETimelineEntryType = 9
)

// Enum value maps for ETimelineEntryType.
var (
	ETimelineEntryType_name = map[int32]string{
		0: "k_ETimelineEntryType_Invalid",
		1: "k_ETimelineEntryType_GameMode",
		2: "k_ETimelineEntryType_Event",
		3: "k_ETimelineEntryType_StateDescription",
		4: "k_ETimelineEntryType_Achievement",
		5: "k_ETimelineEntryType_UserMarker",
		6: "k_ETimelineEntryType_Screenshot",
		7: "k_ETimelineEntryType_Error",
		8: "k_ETimelineEntryType_Tag",
		9: "k_ETimelineEntryType_GamePhase",
	}
	ETimelineEntryType_value = map[string]int32{
		"k_ETimelineEntryType_Invalid":          0,
		"k_ETimelineEntryType_GameMode":         1,
		"k_ETimelineEntryType_Event":            2,
		"k_ETimelineEntryType_StateDescription": 3,
		"k_ETimelineEntryType_Achievement":      4,
		"k_ETimelineEntryType_UserMarker":       5,
		"k_ETimelineEntryType_Screenshot":       6,
		"k_ETimelineEntryType_Error":            7,
		"k_ETimelineEntryType_Tag":              8,
		"k_ETimelineEntryType_GamePhase":        9,
	}
)

func (x ETimelineEntryType) Enum() *ETimelineEntryType {
	p := new(ETimelineEntryType)
	*p = x
	return p
}

func (x ETimelineEntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETimelineEntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_webuimessages_gamerecording_proto_enumTypes[0].Descriptor()
}

func (ETimelineEntryType) Type() protoreflect.EnumType {
	return &file_webuimessages_gamerecording_proto_enumTypes[0]
}

func (x ETimelineEntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETimelineEntryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETimelineEntryType(num)
	return nil
}

// Deprecated: Use ETimelineEntryType.Descriptor instead.
func (ETimelineEntryType) EnumDescriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{0}
}

type EPhaseResultType int32

const (
	EPhaseResultType_k_EPhaseResultType_Automatic EPhaseResultType = 1
	EPhaseResultType_k_EPhaseResultType_Blank     EPhaseResultType = 2
	EPhaseResultType_k_EPhaseResultType_API       EPhaseResultType = 3
)

// Enum value maps for EPhaseResultType.
var (
	EPhaseResultType_name = map[int32]string{
		1: "k_EPhaseResultType_Automatic",
		2: "k_EPhaseResultType_Blank",
		3: "k_EPhaseResultType_API",
	}
	EPhaseResultType_value = map[string]int32{
		"k_EPhaseResultType_Automatic": 1,
		"k_EPhaseResultType_Blank":     2,
		"k_EPhaseResultType_API":       3,
	}
)

func (x EPhaseResultType) Enum() *EPhaseResultType {
	p := new(EPhaseResultType)
	*p = x
	return p
}

func (x EPhaseResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPhaseResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_webuimessages_gamerecording_proto_enumTypes[1].Descriptor()
}

func (EPhaseResultType) Type() protoreflect.EnumType {
	return &file_webuimessages_gamerecording_proto_enumTypes[1]
}

func (x EPhaseResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPhaseResultType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPhaseResultType(num)
	return nil
}

// Deprecated: Use EPhaseResultType.Descriptor instead.
func (EPhaseResultType) EnumDescriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{1}
}

type ETimelineChangeNotificationType int32

const (
	ETimelineChangeNotificationType_k_ETimelineChangeNotificationType_Started          ETimelineChangeNotificationType = 1
	ETimelineChangeNotificationType_k_ETimelineChangeNotificationType_Stopped          ETimelineChangeNotificationType = 2
	ETimelineChangeNotificationType_k_ETimelineChangeNotificationType_Deleted          ETimelineChangeNotificationType = 3
	ETimelineChangeNotificationType_k_ETimelineChangeNotificationType_RecordingStarted ETimelineChangeNotificationType = 4
	ETimelineChangeNotificationType_k_ETimelineChangeNotificationType_RecordingStopped ETimelineChangeNotificationType = 5
	ETimelineChangeNotificationType_k_ETimelineChangeNotificationType_RecordingUpdated ETimelineChangeNotificationType = 6
)

// Enum value maps for ETimelineChangeNotificationType.
var (
	ETimelineChangeNotificationType_name = map[int32]string{
		1: "k_ETimelineChangeNotificationType_Started",
		2: "k_ETimelineChangeNotificationType_Stopped",
		3: "k_ETimelineChangeNotificationType_Deleted",
		4: "k_ETimelineChangeNotificationType_RecordingStarted",
		5: "k_ETimelineChangeNotificationType_RecordingStopped",
		6: "k_ETimelineChangeNotificationType_RecordingUpdated",
	}
	ETimelineChangeNotificationType_value = map[string]int32{
		"k_ETimelineChangeNotificationType_Started":          1,
		"k_ETimelineChangeNotificationType_Stopped":          2,
		"k_ETimelineChangeNotificationType_Deleted":          3,
		"k_ETimelineChangeNotificationType_RecordingStarted": 4,
		"k_ETimelineChangeNotificationType_RecordingStopped": 5,
		"k_ETimelineChangeNotificationType_RecordingUpdated": 6,
	}
)

func (x ETimelineChangeNotificationType) Enum() *ETimelineChangeNotificationType {
	p := new(ETimelineChangeNotificationType)
	*p = x
	return p
}

func (x ETimelineChangeNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETimelineChangeNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_webuimessages_gamerecording_proto_enumTypes[2].Descriptor()
}

func (ETimelineChangeNotificationType) Type() protoreflect.EnumType {
	return &file_webuimessages_gamerecording_proto_enumTypes[2]
}

func (x ETimelineChangeNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETimelineChangeNotificationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETimelineChangeNotificationType(num)
	return nil
}

// Deprecated: Use ETimelineChangeNotificationType.Descriptor instead.
func (ETimelineChangeNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{2}
}

type ERecordingSessionChangeNotificationType int32

const (
	ERecordingSessionChangeNotificationType_k_ERecordingSessionChangeNotificationType_Started ERecordingSessionChangeNotificationType = 1
	ERecordingSessionChangeNotificationType_k_ERecordingSessionChangeNotificationType_Stopped ERecordingSessionChangeNotificationType = 2
	ERecordingSessionChangeNotificationType_k_ERecordingSessionChangeNotificationType_Deleted ERecordingSessionChangeNotificationType = 3
	ERecordingSessionChangeNotificationType_k_ERecordingSessionChangeNotificationType_Updated ERecordingSessionChangeNotificationType = 4
)

// Enum value maps for ERecordingSessionChangeNotificationType.
var (
	ERecordingSessionChangeNotificationType_name = map[int32]string{
		1: "k_ERecordingSessionChangeNotificationType_Started",
		2: "k_ERecordingSessionChangeNotificationType_Stopped",
		3: "k_ERecordingSessionChangeNotificationType_Deleted",
		4: "k_ERecordingSessionChangeNotificationType_Updated",
	}
	ERecordingSessionChangeNotificationType_value = map[string]int32{
		"k_ERecordingSessionChangeNotificationType_Started": 1,
		"k_ERecordingSessionChangeNotificationType_Stopped": 2,
		"k_ERecordingSessionChangeNotificationType_Deleted": 3,
		"k_ERecordingSessionChangeNotificationType_Updated": 4,
	}
)

func (x ERecordingSessionChangeNotificationType) Enum() *ERecordingSessionChangeNotificationType {
	p := new(ERecordingSessionChangeNotificationType)
	*p = x
	return p
}

func (x ERecordingSessionChangeNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERecordingSessionChangeNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_webuimessages_gamerecording_proto_enumTypes[3].Descriptor()
}

func (ERecordingSessionChangeNotificationType) Type() protoreflect.EnumType {
	return &file_webuimessages_gamerecording_proto_enumTypes[3]
}

func (x ERecordingSessionChangeNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERecordingSessionChangeNotificationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERecordingSessionChangeNotificationType(num)
	return nil
}

// Deprecated: Use ERecordingSessionChangeNotificationType.Descriptor instead.
func (ERecordingSessionChangeNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{3}
}

type EDiskSpaceType int32

const (
	EDiskSpaceType_k_eDiskSpaceType_Recording EDiskSpaceType = 0
	EDiskSpaceType_k_eDiskSpaceType_Clip      EDiskSpaceType = 1
)

// Enum value maps for EDiskSpaceType.
var (
	EDiskSpaceType_name = map[int32]string{
		0: "k_eDiskSpaceType_Recording",
		1: "k_eDiskSpaceType_Clip",
	}
	EDiskSpaceType_value = map[string]int32{
		"k_eDiskSpaceType_Recording": 0,
		"k_eDiskSpaceType_Clip":      1,
	}
)

func (x EDiskSpaceType) Enum() *EDiskSpaceType {
	p := new(EDiskSpaceType)
	*p = x
	return p
}

func (x EDiskSpaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDiskSpaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_webuimessages_gamerecording_proto_enumTypes[4].Descriptor()
}

func (EDiskSpaceType) Type() protoreflect.EnumType {
	return &file_webuimessages_gamerecording_proto_enumTypes[4]
}

func (x EDiskSpaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDiskSpaceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDiskSpaceType(num)
	return nil
}

// Deprecated: Use EDiskSpaceType.Descriptor instead.
func (EDiskSpaceType) EnumDescriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{4}
}

type EThumbnailTimePrecision int32

const (
	EThumbnailTimePrecision_k_ePrecise EThumbnailTimePrecision = 0
	EThumbnailTimePrecision_k_eLoose   EThumbnailTimePrecision = 1
)

// Enum value maps for EThumbnailTimePrecision.
var (
	EThumbnailTimePrecision_name = map[int32]string{
		0: "k_ePrecise",
		1: "k_eLoose",
	}
	EThumbnailTimePrecision_value = map[string]int32{
		"k_ePrecise": 0,
		"k_eLoose":   1,
	}
)

func (x EThumbnailTimePrecision) Enum() *EThumbnailTimePrecision {
	p := new(EThumbnailTimePrecision)
	*p = x
	return p
}

func (x EThumbnailTimePrecision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EThumbnailTimePrecision) Descriptor() protoreflect.EnumDescriptor {
	return file_webuimessages_gamerecording_proto_enumTypes[5].Descriptor()
}

func (EThumbnailTimePrecision) Type() protoreflect.EnumType {
	return &file_webuimessages_gamerecording_proto_enumTypes[5]
}

func (x EThumbnailTimePrecision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EThumbnailTimePrecision) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EThumbnailTimePrecision(num)
	return nil
}

// Deprecated: Use EThumbnailTimePrecision.Descriptor instead.
func (EThumbnailTimePrecision) EnumDescriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{5}
}

type EThumbnailFormat int32

const (
	EThumbnailFormat_k_eJPEG EThumbnailFormat = 1
	EThumbnailFormat_k_eRGB  EThumbnailFormat = 2
)

// Enum value maps for EThumbnailFormat.
var (
	EThumbnailFormat_name = map[int32]string{
		1: "k_eJPEG",
		2: "k_eRGB",
	}
	EThumbnailFormat_value = map[string]int32{
		"k_eJPEG": 1,
		"k_eRGB":  2,
	}
)

func (x EThumbnailFormat) Enum() *EThumbnailFormat {
	p := new(EThumbnailFormat)
	*p = x
	return p
}

func (x EThumbnailFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EThumbnailFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_webuimessages_gamerecording_proto_enumTypes[6].Descriptor()
}

func (EThumbnailFormat) Type() protoreflect.EnumType {
	return &file_webuimessages_gamerecording_proto_enumTypes[6]
}

func (x EThumbnailFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EThumbnailFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EThumbnailFormat(num)
	return nil
}

// Deprecated: Use EThumbnailFormat.Descriptor instead.
func (EThumbnailFormat) EnumDescriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{6}
}

type CGameRecording_GetActiveTimelineApps_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_GetActiveTimelineApps_Request) Reset() {
	*x = CGameRecording_GetActiveTimelineApps_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetActiveTimelineApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetActiveTimelineApps_Request) ProtoMessage() {}

func (x *CGameRecording_GetActiveTimelineApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetActiveTimelineApps_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetActiveTimelineApps_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{0}
}

type CGameRecording_GetActiveTimelineApps_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps []*CGameRecording_GetActiveTimelineApps_Response_App `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
}

func (x *CGameRecording_GetActiveTimelineApps_Response) Reset() {
	*x = CGameRecording_GetActiveTimelineApps_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetActiveTimelineApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetActiveTimelineApps_Response) ProtoMessage() {}

func (x *CGameRecording_GetActiveTimelineApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetActiveTimelineApps_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetActiveTimelineApps_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{1}
}

func (x *CGameRecording_GetActiveTimelineApps_Response) GetApps() []*CGameRecording_GetActiveTimelineApps_Response_App {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CGameRecording_GetTimelinesForApp_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (x *CGameRecording_GetTimelinesForApp_Request) Reset() {
	*x = CGameRecording_GetTimelinesForApp_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetTimelinesForApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTimelinesForApp_Request) ProtoMessage() {}

func (x *CGameRecording_GetTimelinesForApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTimelinesForApp_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTimelinesForApp_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{2}
}

func (x *CGameRecording_GetTimelinesForApp_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_GetTimelinesForApp_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timelines []*CGameRecordingTimelineMetadata `protobuf:"bytes,1,rep,name=timelines" json:"timelines,omitempty"`
}

func (x *CGameRecording_GetTimelinesForApp_Response) Reset() {
	*x = CGameRecording_GetTimelinesForApp_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetTimelinesForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTimelinesForApp_Response) ProtoMessage() {}

func (x *CGameRecording_GetTimelinesForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTimelinesForApp_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTimelinesForApp_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{3}
}

func (x *CGameRecording_GetTimelinesForApp_Response) GetTimelines() []*CGameRecordingTimelineMetadata {
	if x != nil {
		return x.Timelines
	}
	return nil
}

type CGameRecording_GetTimelinesForClip_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClipId *string `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
}

func (x *CGameRecording_GetTimelinesForClip_Request) Reset() {
	*x = CGameRecording_GetTimelinesForClip_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetTimelinesForClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTimelinesForClip_Request) ProtoMessage() {}

func (x *CGameRecording_GetTimelinesForClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTimelinesForClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTimelinesForClip_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{4}
}

func (x *CGameRecording_GetTimelinesForClip_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

type CGameRecording_GetTimelinesForClip_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId                     *uint64                           `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Timelines                  []*CGameRecordingTimelineMetadata `protobuf:"bytes,2,rep,name=timelines" json:"timelines,omitempty"`
	FirstTimelineStartOffsetMs *uint64                           `protobuf:"varint,3,opt,name=first_timeline_start_offset_ms,json=firstTimelineStartOffsetMs" json:"first_timeline_start_offset_ms,omitempty"`
}

func (x *CGameRecording_GetTimelinesForClip_Response) Reset() {
	*x = CGameRecording_GetTimelinesForClip_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetTimelinesForClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTimelinesForClip_Response) ProtoMessage() {}

func (x *CGameRecording_GetTimelinesForClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTimelinesForClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTimelinesForClip_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{5}
}

func (x *CGameRecording_GetTimelinesForClip_Response) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_GetTimelinesForClip_Response) GetTimelines() []*CGameRecordingTimelineMetadata {
	if x != nil {
		return x.Timelines
	}
	return nil
}

func (x *CGameRecording_GetTimelinesForClip_Response) GetFirstTimelineStartOffsetMs() uint64 {
	if x != nil && x.FirstTimelineStartOffsetMs != nil {
		return *x.FirstTimelineStartOffsetMs
	}
	return 0
}

type CGameRecording_QueryPhases_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page               *uint32                                   `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	Count              *uint32                                   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	FilterGameid       *uint64                                   `protobuf:"varint,10,opt,name=filter_gameid,json=filterGameid" json:"filter_gameid,omitempty"`
	FilterSearchString *string                                   `protobuf:"bytes,11,opt,name=filter_search_string,json=filterSearchString" json:"filter_search_string,omitempty"`
	FilterTags         []*CGameRecording_QueryPhases_Request_Tag `protobuf:"bytes,12,rep,name=filter_tags,json=filterTags" json:"filter_tags,omitempty"`
	FilterPhaseId      *string                                   `protobuf:"bytes,13,opt,name=filter_phase_id,json=filterPhaseId" json:"filter_phase_id,omitempty"`
}

func (x *CGameRecording_QueryPhases_Request) Reset() {
	*x = CGameRecording_QueryPhases_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_QueryPhases_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_QueryPhases_Request) ProtoMessage() {}

func (x *CGameRecording_QueryPhases_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_QueryPhases_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_QueryPhases_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{6}
}

func (x *CGameRecording_QueryPhases_Request) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Request) GetFilterGameid() uint64 {
	if x != nil && x.FilterGameid != nil {
		return *x.FilterGameid
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Request) GetFilterSearchString() string {
	if x != nil && x.FilterSearchString != nil {
		return *x.FilterSearchString
	}
	return ""
}

func (x *CGameRecording_QueryPhases_Request) GetFilterTags() []*CGameRecording_QueryPhases_Request_Tag {
	if x != nil {
		return x.FilterTags
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Request) GetFilterPhaseId() string {
	if x != nil && x.FilterPhaseId != nil {
		return *x.FilterPhaseId
	}
	return ""
}

type CGameRecording_QueryPhases_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phases     []*CGameRecording_QueryPhases_Response_Phase `protobuf:"bytes,1,rep,name=phases" json:"phases,omitempty"`
	TotalCount *uint32                                      `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
}

func (x *CGameRecording_QueryPhases_Response) Reset() {
	*x = CGameRecording_QueryPhases_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_QueryPhases_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_QueryPhases_Response) ProtoMessage() {}

func (x *CGameRecording_QueryPhases_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_QueryPhases_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_QueryPhases_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{7}
}

func (x *CGameRecording_QueryPhases_Response) GetPhases() []*CGameRecording_QueryPhases_Response_Phase {
	if x != nil {
		return x.Phases
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response) GetTotalCount() uint32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

type CGameRecording_GetTags_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (x *CGameRecording_GetTags_Request) Reset() {
	*x = CGameRecording_GetTags_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetTags_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTags_Request) ProtoMessage() {}

func (x *CGameRecording_GetTags_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTags_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTags_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{8}
}

func (x *CGameRecording_GetTags_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_GetTags_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*CTimelineTag `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (x *CGameRecording_GetTags_Response) Reset() {
	*x = CGameRecording_GetTags_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetTags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTags_Response) ProtoMessage() {}

func (x *CGameRecording_GetTags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTags_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTags_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{9}
}

func (x *CGameRecording_GetTags_Response) GetTags() []*CTimelineTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CGameRecording_GetEnoughDiskSpace_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_GetEnoughDiskSpace_Request) Reset() {
	*x = CGameRecording_GetEnoughDiskSpace_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetEnoughDiskSpace_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetEnoughDiskSpace_Request) ProtoMessage() {}

func (x *CGameRecording_GetEnoughDiskSpace_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetEnoughDiskSpace_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetEnoughDiskSpace_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{10}
}

type CGameRecording_GetEnoughDiskSpace_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnoughSpace *bool `protobuf:"varint,1,opt,name=enough_space,json=enoughSpace" json:"enough_space,omitempty"`
}

func (x *CGameRecording_GetEnoughDiskSpace_Response) Reset() {
	*x = CGameRecording_GetEnoughDiskSpace_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetEnoughDiskSpace_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetEnoughDiskSpace_Response) ProtoMessage() {}

func (x *CGameRecording_GetEnoughDiskSpace_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetEnoughDiskSpace_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetEnoughDiskSpace_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{11}
}

func (x *CGameRecording_GetEnoughDiskSpace_Response) GetEnoughSpace() bool {
	if x != nil && x.EnoughSpace != nil {
		return *x.EnoughSpace
	}
	return false
}

type CGameRecording_GetAvailableDiskSpace_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_GetAvailableDiskSpace_Request) Reset() {
	*x = CGameRecording_GetAvailableDiskSpace_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetAvailableDiskSpace_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetAvailableDiskSpace_Request) ProtoMessage() {}

func (x *CGameRecording_GetAvailableDiskSpace_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetAvailableDiskSpace_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetAvailableDiskSpace_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{12}
}

type CGameRecording_GetAvailableDiskSpace_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size *float64 `protobuf:"fixed64,1,opt,name=size" json:"size,omitempty"`
}

func (x *CGameRecording_GetAvailableDiskSpace_Response) Reset() {
	*x = CGameRecording_GetAvailableDiskSpace_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetAvailableDiskSpace_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetAvailableDiskSpace_Response) ProtoMessage() {}

func (x *CGameRecording_GetAvailableDiskSpace_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetAvailableDiskSpace_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetAvailableDiskSpace_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{13}
}

func (x *CGameRecording_GetAvailableDiskSpace_Response) GetSize() float64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type CGameRecording_TimelineChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationType *ETimelineChangeNotificationType `protobuf:"varint,1,opt,name=notification_type,json=notificationType,enum=ETimelineChangeNotificationType,def=1" json:"notification_type,omitempty"`
	TimelineId       *string                          `protobuf:"bytes,2,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	GameId           *uint64                          `protobuf:"varint,3,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	StartTime        *uint32                          `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	DurationMs       *uint64                          `protobuf:"varint,5,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
}

// Default values for CGameRecording_TimelineChanged_Notification fields.
const (
	Default_CGameRecording_TimelineChanged_Notification_NotificationType = ETimelineChangeNotificationType_k_ETimelineChangeNotificationType_Started
)

func (x *CGameRecording_TimelineChanged_Notification) Reset() {
	*x = CGameRecording_TimelineChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_TimelineChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_TimelineChanged_Notification) ProtoMessage() {}

func (x *CGameRecording_TimelineChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_TimelineChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_TimelineChanged_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{14}
}

func (x *CGameRecording_TimelineChanged_Notification) GetNotificationType() ETimelineChangeNotificationType {
	if x != nil && x.NotificationType != nil {
		return *x.NotificationType
	}
	return Default_CGameRecording_TimelineChanged_Notification_NotificationType
}

func (x *CGameRecording_TimelineChanged_Notification) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_TimelineChanged_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_TimelineChanged_Notification) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CGameRecording_TimelineChanged_Notification) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

type CGameRecording_RecordingSessionChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationType *ERecordingSessionChangeNotificationType `protobuf:"varint,1,opt,name=notification_type,json=notificationType,enum=ERecordingSessionChangeNotificationType,def=1" json:"notification_type,omitempty"`
	TimelineId       *string                                  `protobuf:"bytes,2,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	GameId           *uint64                                  `protobuf:"varint,4,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	SessionId        *string                                  `protobuf:"bytes,5,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	StartOffset      *uint64                                  `protobuf:"varint,6,opt,name=start_offset,json=startOffset" json:"start_offset,omitempty"`
	DurationMs       *uint64                                  `protobuf:"varint,7,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	RecordingType    *EGameRecordingType                      `protobuf:"varint,8,opt,name=recording_type,json=recordingType,enum=EGameRecordingType,def=0" json:"recording_type,omitempty"`
}

// Default values for CGameRecording_RecordingSessionChanged_Notification fields.
const (
	Default_CGameRecording_RecordingSessionChanged_Notification_NotificationType = ERecordingSessionChangeNotificationType_k_ERecordingSessionChangeNotificationType_Started
	Default_CGameRecording_RecordingSessionChanged_Notification_RecordingType    = EGameRecordingType_k_EGameRecordingType_Unknown
)

func (x *CGameRecording_RecordingSessionChanged_Notification) Reset() {
	*x = CGameRecording_RecordingSessionChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_RecordingSessionChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_RecordingSessionChanged_Notification) ProtoMessage() {}

func (x *CGameRecording_RecordingSessionChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_RecordingSessionChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_RecordingSessionChanged_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{15}
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetNotificationType() ERecordingSessionChangeNotificationType {
	if x != nil && x.NotificationType != nil {
		return *x.NotificationType
	}
	return Default_CGameRecording_RecordingSessionChanged_Notification_NotificationType
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetStartOffset() uint64 {
	if x != nil && x.StartOffset != nil {
		return *x.StartOffset
	}
	return 0
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetRecordingType() EGameRecordingType {
	if x != nil && x.RecordingType != nil {
		return *x.RecordingType
	}
	return Default_CGameRecording_RecordingSessionChanged_Notification_RecordingType
}

type CTimelineEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimelineId        *string             `protobuf:"bytes,1,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	EntryId           *uint64             `protobuf:"varint,2,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	Time              *uint64             `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Type              *ETimelineEntryType `protobuf:"varint,4,opt,name=type,enum=ETimelineEntryType,def=0" json:"type,omitempty"`
	GameMode          *int32              `protobuf:"varint,5,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	RangeTitle        *string             `protobuf:"bytes,7,opt,name=range_title,json=rangeTitle" json:"range_title,omitempty"`
	RangeDuration     *uint64             `protobuf:"varint,8,opt,name=range_duration,json=rangeDuration" json:"range_duration,omitempty"`
	RangePossibleClip *int32              `protobuf:"varint,9,opt,name=range_possible_clip,json=rangePossibleClip" json:"range_possible_clip,omitempty"`
	TimestampTitle    *string             `protobuf:"bytes,10,opt,name=timestamp_title,json=timestampTitle" json:"timestamp_title,omitempty"`
	MarkerIcon        *string             `protobuf:"bytes,11,opt,name=marker_icon,json=markerIcon" json:"marker_icon,omitempty"`
	MarkerDescription *string             `protobuf:"bytes,13,opt,name=marker_description,json=markerDescription" json:"marker_description,omitempty"`
	MarkerPriority    *int32              `protobuf:"varint,14,opt,name=marker_priority,json=markerPriority" json:"marker_priority,omitempty"`
	ScreenshotHandle  *uint32             `protobuf:"varint,15,opt,name=screenshot_handle,json=screenshotHandle" json:"screenshot_handle,omitempty"`
	AchievementName   *string             `protobuf:"bytes,16,opt,name=achievement_name,json=achievementName" json:"achievement_name,omitempty"`
	Tag               []*CTimelineTag     `protobuf:"bytes,17,rep,name=tag" json:"tag,omitempty"`
	PhaseId           *string             `protobuf:"bytes,18,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
}

// Default values for CTimelineEntry fields.
const (
	Default_CTimelineEntry_Type = ETimelineEntryType_k_ETimelineEntryType_Invalid
)

func (x *CTimelineEntry) Reset() {
	*x = CTimelineEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTimelineEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimelineEntry) ProtoMessage() {}

func (x *CTimelineEntry) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimelineEntry.ProtoReflect.Descriptor instead.
func (*CTimelineEntry) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{16}
}

func (x *CTimelineEntry) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CTimelineEntry) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *CTimelineEntry) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CTimelineEntry) GetType() ETimelineEntryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CTimelineEntry_Type
}

func (x *CTimelineEntry) GetGameMode() int32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CTimelineEntry) GetRangeTitle() string {
	if x != nil && x.RangeTitle != nil {
		return *x.RangeTitle
	}
	return ""
}

func (x *CTimelineEntry) GetRangeDuration() uint64 {
	if x != nil && x.RangeDuration != nil {
		return *x.RangeDuration
	}
	return 0
}

func (x *CTimelineEntry) GetRangePossibleClip() int32 {
	if x != nil && x.RangePossibleClip != nil {
		return *x.RangePossibleClip
	}
	return 0
}

func (x *CTimelineEntry) GetTimestampTitle() string {
	if x != nil && x.TimestampTitle != nil {
		return *x.TimestampTitle
	}
	return ""
}

func (x *CTimelineEntry) GetMarkerIcon() string {
	if x != nil && x.MarkerIcon != nil {
		return *x.MarkerIcon
	}
	return ""
}

func (x *CTimelineEntry) GetMarkerDescription() string {
	if x != nil && x.MarkerDescription != nil {
		return *x.MarkerDescription
	}
	return ""
}

func (x *CTimelineEntry) GetMarkerPriority() int32 {
	if x != nil && x.MarkerPriority != nil {
		return *x.MarkerPriority
	}
	return 0
}

func (x *CTimelineEntry) GetScreenshotHandle() uint32 {
	if x != nil && x.ScreenshotHandle != nil {
		return *x.ScreenshotHandle
	}
	return 0
}

func (x *CTimelineEntry) GetAchievementName() string {
	if x != nil && x.AchievementName != nil {
		return *x.AchievementName
	}
	return ""
}

func (x *CTimelineEntry) GetTag() []*CTimelineTag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *CTimelineEntry) GetPhaseId() string {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return ""
}

type CGameRecording_TimelineEntryChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry  *CTimelineEntry `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	GameId *uint64         `protobuf:"fixed64,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (x *CGameRecording_TimelineEntryChanged_Notification) Reset() {
	*x = CGameRecording_TimelineEntryChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_TimelineEntryChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_TimelineEntryChanged_Notification) ProtoMessage() {}

func (x *CGameRecording_TimelineEntryChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_TimelineEntryChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_TimelineEntryChanged_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{17}
}

func (x *CGameRecording_TimelineEntryChanged_Notification) GetEntry() *CTimelineEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *CGameRecording_TimelineEntryChanged_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_LowDiskSpace_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_LowDiskSpace_Notification) Reset() {
	*x = CGameRecording_LowDiskSpace_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_LowDiskSpace_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_LowDiskSpace_Notification) ProtoMessage() {}

func (x *CGameRecording_LowDiskSpace_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_LowDiskSpace_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_LowDiskSpace_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{18}
}

type CGameRecording_PostGameHighlightsChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (x *CGameRecording_PostGameHighlightsChanged_Notification) Reset() {
	*x = CGameRecording_PostGameHighlightsChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_PostGameHighlightsChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_PostGameHighlightsChanged_Notification) ProtoMessage() {}

func (x *CGameRecording_PostGameHighlightsChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_PostGameHighlightsChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_PostGameHighlightsChanged_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{19}
}

func (x *CGameRecording_PostGameHighlightsChanged_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_OpenOverlayToGamePhase_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId  *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	PhaseId *string `protobuf:"bytes,2,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
}

func (x *CGameRecording_OpenOverlayToGamePhase_Notification) Reset() {
	*x = CGameRecording_OpenOverlayToGamePhase_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_OpenOverlayToGamePhase_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_OpenOverlayToGamePhase_Notification) ProtoMessage() {}

func (x *CGameRecording_OpenOverlayToGamePhase_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_OpenOverlayToGamePhase_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_OpenOverlayToGamePhase_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{20}
}

func (x *CGameRecording_OpenOverlayToGamePhase_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_OpenOverlayToGamePhase_Notification) GetPhaseId() string {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return ""
}

type CGameRecording_OpenOverlayToTimelineEvent_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId  *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	EntryId *uint64 `protobuf:"varint,2,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
}

func (x *CGameRecording_OpenOverlayToTimelineEvent_Notification) Reset() {
	*x = CGameRecording_OpenOverlayToTimelineEvent_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_OpenOverlayToTimelineEvent_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_OpenOverlayToTimelineEvent_Notification) ProtoMessage() {}

func (x *CGameRecording_OpenOverlayToTimelineEvent_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_OpenOverlayToTimelineEvent_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_OpenOverlayToTimelineEvent_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{21}
}

func (x *CGameRecording_OpenOverlayToTimelineEvent_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_OpenOverlayToTimelineEvent_Notification) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

type CGameRecording_PhaseListChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_PhaseListChanged_Notification) Reset() {
	*x = CGameRecording_PhaseListChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_PhaseListChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_PhaseListChanged_Notification) ProtoMessage() {}

func (x *CGameRecording_PhaseListChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_PhaseListChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_PhaseListChanged_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{22}
}

type CGameRecording_ClipSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClipId                   *string `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	GameId                   *uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	DurationMs               *uint64 `protobuf:"varint,3,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	DateRecorded             *uint32 `protobuf:"varint,4,opt,name=date_recorded,json=dateRecorded" json:"date_recorded,omitempty"`
	StartTimelineId          *string `protobuf:"bytes,5,opt,name=start_timeline_id,json=startTimelineId" json:"start_timeline_id,omitempty"`
	StartOffsetMs            *uint64 `protobuf:"varint,6,opt,name=start_offset_ms,json=startOffsetMs" json:"start_offset_ms,omitempty"`
	PublishedFileId          *uint64 `protobuf:"varint,7,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	FileSize                 *uint64 `protobuf:"varint,8,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Name                     *string `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	DateClipped              *uint32 `protobuf:"varint,10,opt,name=date_clipped,json=dateClipped" json:"date_clipped,omitempty"`
	Temporary                *bool   `protobuf:"varint,11,opt,name=temporary" json:"temporary,omitempty"`
	OriginalDevice           *string `protobuf:"bytes,12,opt,name=original_device,json=originalDevice" json:"original_device,omitempty"`
	OriginalGamingDeviceType *uint32 `protobuf:"varint,13,opt,name=original_gaming_device_type,json=originalGamingDeviceType" json:"original_gaming_device_type,omitempty"`
	DateDownloaded           *uint32 `protobuf:"varint,14,opt,name=date_downloaded,json=dateDownloaded" json:"date_downloaded,omitempty"`
	ThumbnailUrl             *string `protobuf:"bytes,15,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	ThumbnailWidth           *uint32 `protobuf:"varint,16,opt,name=thumbnail_width,json=thumbnailWidth" json:"thumbnail_width,omitempty"`
	ThumbnailHeight          *uint32 `protobuf:"varint,17,opt,name=thumbnail_height,json=thumbnailHeight" json:"thumbnail_height,omitempty"`
}

func (x *CGameRecording_ClipSummary) Reset() {
	*x = CGameRecording_ClipSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_ClipSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ClipSummary) ProtoMessage() {}

func (x *CGameRecording_ClipSummary) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ClipSummary.ProtoReflect.Descriptor instead.
func (*CGameRecording_ClipSummary) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{23}
}

func (x *CGameRecording_ClipSummary) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_ClipSummary) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetDateRecorded() uint32 {
	if x != nil && x.DateRecorded != nil {
		return *x.DateRecorded
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetStartTimelineId() string {
	if x != nil && x.StartTimelineId != nil {
		return *x.StartTimelineId
	}
	return ""
}

func (x *CGameRecording_ClipSummary) GetStartOffsetMs() uint64 {
	if x != nil && x.StartOffsetMs != nil {
		return *x.StartOffsetMs
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CGameRecording_ClipSummary) GetDateClipped() uint32 {
	if x != nil && x.DateClipped != nil {
		return *x.DateClipped
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetTemporary() bool {
	if x != nil && x.Temporary != nil {
		return *x.Temporary
	}
	return false
}

func (x *CGameRecording_ClipSummary) GetOriginalDevice() string {
	if x != nil && x.OriginalDevice != nil {
		return *x.OriginalDevice
	}
	return ""
}

func (x *CGameRecording_ClipSummary) GetOriginalGamingDeviceType() uint32 {
	if x != nil && x.OriginalGamingDeviceType != nil {
		return *x.OriginalGamingDeviceType
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetDateDownloaded() uint32 {
	if x != nil && x.DateDownloaded != nil {
		return *x.DateDownloaded
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *CGameRecording_ClipSummary) GetThumbnailWidth() uint32 {
	if x != nil && x.ThumbnailWidth != nil {
		return *x.ThumbnailWidth
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetThumbnailHeight() uint32 {
	if x != nil && x.ThumbnailHeight != nil {
		return *x.ThumbnailHeight
	}
	return 0
}

type CGameRecording_SaveClip_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId    *uint64                                   `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Start     *CGameRecording_SaveClip_Request_Position `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	End       *CGameRecording_SaveClip_Request_Position `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	Name      *string                                   `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	SrcClipId *string                                   `protobuf:"bytes,5,opt,name=src_clip_id,json=srcClipId" json:"src_clip_id,omitempty"`
	Temporary *bool                                     `protobuf:"varint,6,opt,name=temporary" json:"temporary,omitempty"`
}

func (x *CGameRecording_SaveClip_Request) Reset() {
	*x = CGameRecording_SaveClip_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_SaveClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SaveClip_Request) ProtoMessage() {}

func (x *CGameRecording_SaveClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SaveClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_SaveClip_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{24}
}

func (x *CGameRecording_SaveClip_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_SaveClip_Request) GetStart() *CGameRecording_SaveClip_Request_Position {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CGameRecording_SaveClip_Request) GetEnd() *CGameRecording_SaveClip_Request_Position {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *CGameRecording_SaveClip_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CGameRecording_SaveClip_Request) GetSrcClipId() string {
	if x != nil && x.SrcClipId != nil {
		return *x.SrcClipId
	}
	return ""
}

func (x *CGameRecording_SaveClip_Request) GetTemporary() bool {
	if x != nil && x.Temporary != nil {
		return *x.Temporary
	}
	return false
}

type CGameRecording_SaveClip_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *CGameRecording_ClipSummary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
}

func (x *CGameRecording_SaveClip_Response) Reset() {
	*x = CGameRecording_SaveClip_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_SaveClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SaveClip_Response) ProtoMessage() {}

func (x *CGameRecording_SaveClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SaveClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_SaveClip_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{25}
}

func (x *CGameRecording_SaveClip_Response) GetSummary() *CGameRecording_ClipSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type CGameRecording_DeleteClip_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClipId *string `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
}

func (x *CGameRecording_DeleteClip_Request) Reset() {
	*x = CGameRecording_DeleteClip_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_DeleteClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_DeleteClip_Request) ProtoMessage() {}

func (x *CGameRecording_DeleteClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_DeleteClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_DeleteClip_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{26}
}

func (x *CGameRecording_DeleteClip_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

type CGameRecording_DeleteClip_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_DeleteClip_Response) Reset() {
	*x = CGameRecording_DeleteClip_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_DeleteClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_DeleteClip_Response) ProtoMessage() {}

func (x *CGameRecording_DeleteClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_DeleteClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_DeleteClip_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{27}
}

type CGameRecording_ExportClip_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitrateKbps     *int32 `protobuf:"varint,1,opt,name=bitrate_kbps,json=bitrateKbps" json:"bitrate_kbps,omitempty"`
	Width           *int32 `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height          *int32 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	FramesPerSecond *int32 `protobuf:"varint,4,opt,name=frames_per_second,json=framesPerSecond" json:"frames_per_second,omitempty"`
}

func (x *CGameRecording_ExportClip_Settings) Reset() {
	*x = CGameRecording_ExportClip_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_ExportClip_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ExportClip_Settings) ProtoMessage() {}

func (x *CGameRecording_ExportClip_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ExportClip_Settings.ProtoReflect.Descriptor instead.
func (*CGameRecording_ExportClip_Settings) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{28}
}

func (x *CGameRecording_ExportClip_Settings) GetBitrateKbps() int32 {
	if x != nil && x.BitrateKbps != nil {
		return *x.BitrateKbps
	}
	return 0
}

func (x *CGameRecording_ExportClip_Settings) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CGameRecording_ExportClip_Settings) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CGameRecording_ExportClip_Settings) GetFramesPerSecond() int32 {
	if x != nil && x.FramesPerSecond != nil {
		return *x.FramesPerSecond
	}
	return 0
}

type CGameRecording_ExportClip_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClipId        *string                             `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	ExportMp4Path *string                             `protobuf:"bytes,2,opt,name=export_mp4_path,json=exportMp4Path" json:"export_mp4_path,omitempty"`
	Settings      *CGameRecording_ExportClip_Settings `protobuf:"bytes,3,opt,name=settings" json:"settings,omitempty"`
}

func (x *CGameRecording_ExportClip_Request) Reset() {
	*x = CGameRecording_ExportClip_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_ExportClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ExportClip_Request) ProtoMessage() {}

func (x *CGameRecording_ExportClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ExportClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_ExportClip_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{29}
}

func (x *CGameRecording_ExportClip_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_ExportClip_Request) GetExportMp4Path() string {
	if x != nil && x.ExportMp4Path != nil {
		return *x.ExportMp4Path
	}
	return ""
}

func (x *CGameRecording_ExportClip_Request) GetSettings() *CGameRecording_ExportClip_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type CGameRecording_ExportClip_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_ExportClip_Response) Reset() {
	*x = CGameRecording_ExportClip_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_ExportClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ExportClip_Response) ProtoMessage() {}

func (x *CGameRecording_ExportClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ExportClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_ExportClip_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{30}
}

type CGameRecording_TakeScreenshot_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId           *uint64 `protobuf:"fixed64,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	TimelineId       *string `protobuf:"bytes,2,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	TimelineOffsetMs *uint64 `protobuf:"varint,3,opt,name=timeline_offset_ms,json=timelineOffsetMs" json:"timeline_offset_ms,omitempty"`
}

func (x *CGameRecording_TakeScreenshot_Request) Reset() {
	*x = CGameRecording_TakeScreenshot_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_TakeScreenshot_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_TakeScreenshot_Request) ProtoMessage() {}

func (x *CGameRecording_TakeScreenshot_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_TakeScreenshot_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_TakeScreenshot_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{31}
}

func (x *CGameRecording_TakeScreenshot_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_TakeScreenshot_Request) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_TakeScreenshot_Request) GetTimelineOffsetMs() uint64 {
	if x != nil && x.TimelineOffsetMs != nil {
		return *x.TimelineOffsetMs
	}
	return 0
}

type CGameRecording_TakeScreenshot_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenshotId *uint64 `protobuf:"fixed64,1,opt,name=screenshot_id,json=screenshotId" json:"screenshot_id,omitempty"`
}

func (x *CGameRecording_TakeScreenshot_Response) Reset() {
	*x = CGameRecording_TakeScreenshot_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_TakeScreenshot_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_TakeScreenshot_Response) ProtoMessage() {}

func (x *CGameRecording_TakeScreenshot_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_TakeScreenshot_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_TakeScreenshot_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{32}
}

func (x *CGameRecording_TakeScreenshot_Response) GetScreenshotId() uint64 {
	if x != nil && x.ScreenshotId != nil {
		return *x.ScreenshotId
	}
	return 0
}

type CGameRecording_UploadClipToSteam_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClipId     *string `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	Title      *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Desc       *string `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	Visibility *int32  `protobuf:"varint,4,opt,name=visibility" json:"visibility,omitempty"`
}

func (x *CGameRecording_UploadClipToSteam_Request) Reset() {
	*x = CGameRecording_UploadClipToSteam_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_UploadClipToSteam_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UploadClipToSteam_Request) ProtoMessage() {}

func (x *CGameRecording_UploadClipToSteam_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UploadClipToSteam_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_UploadClipToSteam_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{33}
}

func (x *CGameRecording_UploadClipToSteam_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_UploadClipToSteam_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CGameRecording_UploadClipToSteam_Request) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *CGameRecording_UploadClipToSteam_Request) GetVisibility() int32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

type CGameRecording_UploadClipToSteam_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *CGameRecording_ClipSummary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
}

func (x *CGameRecording_UploadClipToSteam_Response) Reset() {
	*x = CGameRecording_UploadClipToSteam_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_UploadClipToSteam_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UploadClipToSteam_Response) ProtoMessage() {}

func (x *CGameRecording_UploadClipToSteam_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UploadClipToSteam_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_UploadClipToSteam_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{34}
}

func (x *CGameRecording_UploadClipToSteam_Response) GetSummary() *CGameRecording_ClipSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type CGameRecording_ZipClip_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClipId *string `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
}

func (x *CGameRecording_ZipClip_Request) Reset() {
	*x = CGameRecording_ZipClip_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_ZipClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ZipClip_Request) ProtoMessage() {}

func (x *CGameRecording_ZipClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ZipClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_ZipClip_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{35}
}

func (x *CGameRecording_ZipClip_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

type CGameRecording_ZipClip_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZipPath *string `protobuf:"bytes,1,opt,name=zip_path,json=zipPath" json:"zip_path,omitempty"`
}

func (x *CGameRecording_ZipClip_Response) Reset() {
	*x = CGameRecording_ZipClip_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_ZipClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ZipClip_Response) ProtoMessage() {}

func (x *CGameRecording_ZipClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ZipClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_ZipClip_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{36}
}

func (x *CGameRecording_ZipClip_Response) GetZipPath() string {
	if x != nil && x.ZipPath != nil {
		return *x.ZipPath
	}
	return ""
}

type CGameRecording_GetClips_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId           *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	CreatedAfter     *uint32 `protobuf:"varint,2,opt,name=created_after,json=createdAfter" json:"created_after,omitempty"`
	IncludeTemporary *bool   `protobuf:"varint,3,opt,name=include_temporary,json=includeTemporary" json:"include_temporary,omitempty"`
}

func (x *CGameRecording_GetClips_Request) Reset() {
	*x = CGameRecording_GetClips_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetClips_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetClips_Request) ProtoMessage() {}

func (x *CGameRecording_GetClips_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetClips_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetClips_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{37}
}

func (x *CGameRecording_GetClips_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_GetClips_Request) GetCreatedAfter() uint32 {
	if x != nil && x.CreatedAfter != nil {
		return *x.CreatedAfter
	}
	return 0
}

func (x *CGameRecording_GetClips_Request) GetIncludeTemporary() bool {
	if x != nil && x.IncludeTemporary != nil {
		return *x.IncludeTemporary
	}
	return false
}

type CGameRecording_GetClips_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clip []*CGameRecording_ClipSummary `protobuf:"bytes,1,rep,name=clip" json:"clip,omitempty"`
}

func (x *CGameRecording_GetClips_Response) Reset() {
	*x = CGameRecording_GetClips_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetClips_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetClips_Response) ProtoMessage() {}

func (x *CGameRecording_GetClips_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetClips_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetClips_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{38}
}

func (x *CGameRecording_GetClips_Response) GetClip() []*CGameRecording_ClipSummary {
	if x != nil {
		return x.Clip
	}
	return nil
}

type CGameRecording_GetAndTrimPostGameHighlights_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId       *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	CreatedAfter *uint32 `protobuf:"varint,2,opt,name=created_after,json=createdAfter" json:"created_after,omitempty"`
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Request) Reset() {
	*x = CGameRecording_GetAndTrimPostGameHighlights_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetAndTrimPostGameHighlights_Request) ProtoMessage() {}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetAndTrimPostGameHighlights_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetAndTrimPostGameHighlights_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{39}
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Request) GetCreatedAfter() uint32 {
	if x != nil && x.CreatedAfter != nil {
		return *x.CreatedAfter
	}
	return 0
}

type CGameRecording_GetAndTrimPostGameHighlights_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*CGameRecordingTimelineEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Response) Reset() {
	*x = CGameRecording_GetAndTrimPostGameHighlights_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetAndTrimPostGameHighlights_Response) ProtoMessage() {}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetAndTrimPostGameHighlights_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetAndTrimPostGameHighlights_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{40}
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Response) GetEvents() []*CGameRecordingTimelineEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CGameRecording_UserAddTimelineEntry_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId *uint64         `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Entry  *CTimelineEntry `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
	ClipId *string         `protobuf:"bytes,3,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
}

func (x *CGameRecording_UserAddTimelineEntry_Request) Reset() {
	*x = CGameRecording_UserAddTimelineEntry_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_UserAddTimelineEntry_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UserAddTimelineEntry_Request) ProtoMessage() {}

func (x *CGameRecording_UserAddTimelineEntry_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UserAddTimelineEntry_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_UserAddTimelineEntry_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{41}
}

func (x *CGameRecording_UserAddTimelineEntry_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_UserAddTimelineEntry_Request) GetEntry() *CTimelineEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *CGameRecording_UserAddTimelineEntry_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

type CGameRecording_UserAddTimelineEntry_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryId *uint64 `protobuf:"varint,1,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
}

func (x *CGameRecording_UserAddTimelineEntry_Response) Reset() {
	*x = CGameRecording_UserAddTimelineEntry_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_UserAddTimelineEntry_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UserAddTimelineEntry_Response) ProtoMessage() {}

func (x *CGameRecording_UserAddTimelineEntry_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UserAddTimelineEntry_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_UserAddTimelineEntry_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{42}
}

func (x *CGameRecording_UserAddTimelineEntry_Response) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

type CGameRecording_UserUpdateTimelineEntry_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId *uint64         `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Entry  *CTimelineEntry `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
	ClipId *string         `protobuf:"bytes,3,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
}

func (x *CGameRecording_UserUpdateTimelineEntry_Request) Reset() {
	*x = CGameRecording_UserUpdateTimelineEntry_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_UserUpdateTimelineEntry_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UserUpdateTimelineEntry_Request) ProtoMessage() {}

func (x *CGameRecording_UserUpdateTimelineEntry_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UserUpdateTimelineEntry_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_UserUpdateTimelineEntry_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{43}
}

func (x *CGameRecording_UserUpdateTimelineEntry_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_UserUpdateTimelineEntry_Request) GetEntry() *CTimelineEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *CGameRecording_UserUpdateTimelineEntry_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

type CGameRecording_UserUpdateTimelineEntry_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_UserUpdateTimelineEntry_Response) Reset() {
	*x = CGameRecording_UserUpdateTimelineEntry_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_UserUpdateTimelineEntry_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UserUpdateTimelineEntry_Response) ProtoMessage() {}

func (x *CGameRecording_UserUpdateTimelineEntry_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UserUpdateTimelineEntry_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_UserUpdateTimelineEntry_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{44}
}

type CGameRecording_UserRemoveTimelineEntry_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId     *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	TimelineId *string `protobuf:"bytes,2,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	EntryId    *uint64 `protobuf:"varint,3,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	ClipId     *string `protobuf:"bytes,4,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) Reset() {
	*x = CGameRecording_UserRemoveTimelineEntry_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UserRemoveTimelineEntry_Request) ProtoMessage() {}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UserRemoveTimelineEntry_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_UserRemoveTimelineEntry_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{45}
}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

type CGameRecording_UserRemoveTimelineEntry_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_UserRemoveTimelineEntry_Response) Reset() {
	*x = CGameRecording_UserRemoveTimelineEntry_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_UserRemoveTimelineEntry_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UserRemoveTimelineEntry_Response) ProtoMessage() {}

func (x *CGameRecording_UserRemoveTimelineEntry_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UserRemoveTimelineEntry_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_UserRemoveTimelineEntry_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{46}
}

type CGameRecording_ManuallyDeleteRecordingsForApps_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameIds []uint64 `protobuf:"varint,1,rep,name=game_ids,json=gameIds" json:"game_ids,omitempty"`
}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Request) Reset() {
	*x = CGameRecording_ManuallyDeleteRecordingsForApps_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ManuallyDeleteRecordingsForApps_Request) ProtoMessage() {}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ManuallyDeleteRecordingsForApps_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_ManuallyDeleteRecordingsForApps_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{47}
}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Request) GetGameIds() []uint64 {
	if x != nil {
		return x.GameIds
	}
	return nil
}

type CGameRecording_ManuallyDeleteRecordingsForApps_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Response) Reset() {
	*x = CGameRecording_ManuallyDeleteRecordingsForApps_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ManuallyDeleteRecordingsForApps_Response) ProtoMessage() {}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ManuallyDeleteRecordingsForApps_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_ManuallyDeleteRecordingsForApps_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{48}
}

type CGameRecording_GetTotalDiskSpaceUsage_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderPath *string         `protobuf:"bytes,1,opt,name=folder_path,json=folderPath" json:"folder_path,omitempty"`
	Type       *EDiskSpaceType `protobuf:"varint,2,opt,name=type,enum=EDiskSpaceType,def=0" json:"type,omitempty"`
}

// Default values for CGameRecording_GetTotalDiskSpaceUsage_Request fields.
const (
	Default_CGameRecording_GetTotalDiskSpaceUsage_Request_Type = EDiskSpaceType_k_eDiskSpaceType_Recording
)

func (x *CGameRecording_GetTotalDiskSpaceUsage_Request) Reset() {
	*x = CGameRecording_GetTotalDiskSpaceUsage_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTotalDiskSpaceUsage_Request) ProtoMessage() {}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTotalDiskSpaceUsage_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTotalDiskSpaceUsage_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{49}
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Request) GetFolderPath() string {
	if x != nil && x.FolderPath != nil {
		return *x.FolderPath
	}
	return ""
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Request) GetType() EDiskSpaceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CGameRecording_GetTotalDiskSpaceUsage_Request_Type
}

type CGameRecording_GetTotalDiskSpaceUsage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size *uint64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Response) Reset() {
	*x = CGameRecording_GetTotalDiskSpaceUsage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTotalDiskSpaceUsage_Response) ProtoMessage() {}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTotalDiskSpaceUsage_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTotalDiskSpaceUsage_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{50}
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Response) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type CGameRecording_GetThumbnails_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId   *string                  `protobuf:"bytes,1,opt,name=recording_id,json=recordingId" json:"recording_id,omitempty"`
	ClipId        *string                  `protobuf:"bytes,3,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	TimelineId    *string                  `protobuf:"bytes,7,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	StartOffsetUs []int64                  `protobuf:"varint,4,rep,name=start_offset_us,json=startOffsetUs" json:"start_offset_us,omitempty"`
	MajorAxis     *uint32                  `protobuf:"varint,5,opt,name=major_axis,json=majorAxis,def=512" json:"major_axis,omitempty"`
	TimePrecision *EThumbnailTimePrecision `protobuf:"varint,6,opt,name=time_precision,json=timePrecision,enum=EThumbnailTimePrecision,def=0" json:"time_precision,omitempty"`
	Format        *EThumbnailFormat        `protobuf:"varint,8,opt,name=format,enum=EThumbnailFormat,def=1" json:"format,omitempty"`
}

// Default values for CGameRecording_GetThumbnails_Request fields.
const (
	Default_CGameRecording_GetThumbnails_Request_MajorAxis     = uint32(512)
	Default_CGameRecording_GetThumbnails_Request_TimePrecision = EThumbnailTimePrecision_k_ePrecise
	Default_CGameRecording_GetThumbnails_Request_Format        = EThumbnailFormat_k_eJPEG
)

func (x *CGameRecording_GetThumbnails_Request) Reset() {
	*x = CGameRecording_GetThumbnails_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetThumbnails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetThumbnails_Request) ProtoMessage() {}

func (x *CGameRecording_GetThumbnails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetThumbnails_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetThumbnails_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{51}
}

func (x *CGameRecording_GetThumbnails_Request) GetRecordingId() string {
	if x != nil && x.RecordingId != nil {
		return *x.RecordingId
	}
	return ""
}

func (x *CGameRecording_GetThumbnails_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_GetThumbnails_Request) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_GetThumbnails_Request) GetStartOffsetUs() []int64 {
	if x != nil {
		return x.StartOffsetUs
	}
	return nil
}

func (x *CGameRecording_GetThumbnails_Request) GetMajorAxis() uint32 {
	if x != nil && x.MajorAxis != nil {
		return *x.MajorAxis
	}
	return Default_CGameRecording_GetThumbnails_Request_MajorAxis
}

func (x *CGameRecording_GetThumbnails_Request) GetTimePrecision() EThumbnailTimePrecision {
	if x != nil && x.TimePrecision != nil {
		return *x.TimePrecision
	}
	return Default_CGameRecording_GetThumbnails_Request_TimePrecision
}

func (x *CGameRecording_GetThumbnails_Request) GetFormat() EThumbnailFormat {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Default_CGameRecording_GetThumbnails_Request_Format
}

type CGameRecording_GetThumbnails_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thumbnails []*CGameRecording_GetThumbnails_Response_Thumbnail `protobuf:"bytes,1,rep,name=thumbnails" json:"thumbnails,omitempty"`
}

func (x *CGameRecording_GetThumbnails_Response) Reset() {
	*x = CGameRecording_GetThumbnails_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetThumbnails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetThumbnails_Response) ProtoMessage() {}

func (x *CGameRecording_GetThumbnails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetThumbnails_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetThumbnails_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{52}
}

func (x *CGameRecording_GetThumbnails_Response) GetThumbnails() []*CGameRecording_GetThumbnails_Response_Thumbnail {
	if x != nil {
		return x.Thumbnails
	}
	return nil
}

type CGameRecording_StartRecording_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (x *CGameRecording_StartRecording_Request) Reset() {
	*x = CGameRecording_StartRecording_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_StartRecording_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_StartRecording_Request) ProtoMessage() {}

func (x *CGameRecording_StartRecording_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_StartRecording_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_StartRecording_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{53}
}

func (x *CGameRecording_StartRecording_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_StartRecording_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_StartRecording_Response) Reset() {
	*x = CGameRecording_StartRecording_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_StartRecording_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_StartRecording_Response) ProtoMessage() {}

func (x *CGameRecording_StartRecording_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_StartRecording_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_StartRecording_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{54}
}

type CGameRecording_StopRecording_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (x *CGameRecording_StopRecording_Request) Reset() {
	*x = CGameRecording_StopRecording_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_StopRecording_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_StopRecording_Request) ProtoMessage() {}

func (x *CGameRecording_StopRecording_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_StopRecording_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_StopRecording_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{55}
}

func (x *CGameRecording_StopRecording_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_StopRecording_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *CGameRecording_ClipSummary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
}

func (x *CGameRecording_StopRecording_Response) Reset() {
	*x = CGameRecording_StopRecording_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_StopRecording_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_StopRecording_Response) ProtoMessage() {}

func (x *CGameRecording_StopRecording_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_StopRecording_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_StopRecording_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{56}
}

func (x *CGameRecording_StopRecording_Response) GetSummary() *CGameRecording_ClipSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type CGameRecording_GetRecordingSize_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (x *CGameRecording_GetRecordingSize_Request) Reset() {
	*x = CGameRecording_GetRecordingSize_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetRecordingSize_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetRecordingSize_Request) ProtoMessage() {}

func (x *CGameRecording_GetRecordingSize_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetRecordingSize_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetRecordingSize_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{57}
}

func (x *CGameRecording_GetRecordingSize_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_GetRecordingSize_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileSize *uint64 `protobuf:"varint,1,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
}

func (x *CGameRecording_GetRecordingSize_Response) Reset() {
	*x = CGameRecording_GetRecordingSize_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetRecordingSize_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetRecordingSize_Response) ProtoMessage() {}

func (x *CGameRecording_GetRecordingSize_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetRecordingSize_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetRecordingSize_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{58}
}

func (x *CGameRecording_GetRecordingSize_Response) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type CGameRecording_CleanupBackgroundRecordings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_CleanupBackgroundRecordings_Request) Reset() {
	*x = CGameRecording_CleanupBackgroundRecordings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_CleanupBackgroundRecordings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_CleanupBackgroundRecordings_Request) ProtoMessage() {}

func (x *CGameRecording_CleanupBackgroundRecordings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_CleanupBackgroundRecordings_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_CleanupBackgroundRecordings_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{59}
}

type CGameRecording_CleanupBackgroundRecordings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_CleanupBackgroundRecordings_Response) Reset() {
	*x = CGameRecording_CleanupBackgroundRecordings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_CleanupBackgroundRecordings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_CleanupBackgroundRecordings_Response) ProtoMessage() {}

func (x *CGameRecording_CleanupBackgroundRecordings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_CleanupBackgroundRecordings_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_CleanupBackgroundRecordings_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{60}
}

type CGameRecording_GetPlatformCapabilities_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_GetPlatformCapabilities_Request) Reset() {
	*x = CGameRecording_GetPlatformCapabilities_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetPlatformCapabilities_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetPlatformCapabilities_Request) ProtoMessage() {}

func (x *CGameRecording_GetPlatformCapabilities_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetPlatformCapabilities_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetPlatformCapabilities_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{61}
}

type CGameRecording_GetPlatformCapabilities_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerProcessAudioCapture *bool `protobuf:"varint,1,opt,name=per_process_audio_capture,json=perProcessAudioCapture" json:"per_process_audio_capture,omitempty"`
}

func (x *CGameRecording_GetPlatformCapabilities_Response) Reset() {
	*x = CGameRecording_GetPlatformCapabilities_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetPlatformCapabilities_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetPlatformCapabilities_Response) ProtoMessage() {}

func (x *CGameRecording_GetPlatformCapabilities_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetPlatformCapabilities_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetPlatformCapabilities_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{62}
}

func (x *CGameRecording_GetPlatformCapabilities_Response) GetPerProcessAudioCapture() bool {
	if x != nil && x.PerProcessAudioCapture != nil {
		return *x.PerProcessAudioCapture
	}
	return false
}

type CGameRecording_ClipCreated_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *CGameRecording_ClipSummary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
}

func (x *CGameRecording_ClipCreated_Notification) Reset() {
	*x = CGameRecording_ClipCreated_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_ClipCreated_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ClipCreated_Notification) ProtoMessage() {}

func (x *CGameRecording_ClipCreated_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ClipCreated_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_ClipCreated_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{63}
}

func (x *CGameRecording_ClipCreated_Notification) GetSummary() *CGameRecording_ClipSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type CGameRecording_ClipDeleted_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClipId *string `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	GameId *uint64 `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (x *CGameRecording_ClipDeleted_Notification) Reset() {
	*x = CGameRecording_ClipDeleted_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_ClipDeleted_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ClipDeleted_Notification) ProtoMessage() {}

func (x *CGameRecording_ClipDeleted_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ClipDeleted_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_ClipDeleted_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{64}
}

func (x *CGameRecording_ClipDeleted_Notification) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_ClipDeleted_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_ExportProgress_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress *float32 `protobuf:"fixed32,1,opt,name=progress" json:"progress,omitempty"`
	ClipId   *string  `protobuf:"bytes,2,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	Eresult  *int32   `protobuf:"varint,3,opt,name=eresult" json:"eresult,omitempty"`
}

func (x *CGameRecording_ExportProgress_Notification) Reset() {
	*x = CGameRecording_ExportProgress_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_ExportProgress_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ExportProgress_Notification) ProtoMessage() {}

func (x *CGameRecording_ExportProgress_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ExportProgress_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_ExportProgress_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{65}
}

func (x *CGameRecording_ExportProgress_Notification) GetProgress() float32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CGameRecording_ExportProgress_Notification) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_ExportProgress_Notification) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

type CGameRecording_PerGameSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gameid  *uint64 `protobuf:"fixed64,1,opt,name=gameid" json:"gameid,omitempty"`
	Enabled *bool   `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	Minutes *int32  `protobuf:"varint,3,opt,name=minutes" json:"minutes,omitempty"`
	Bitrate *int32  `protobuf:"varint,4,opt,name=bitrate" json:"bitrate,omitempty"`
}

func (x *CGameRecording_PerGameSettings) Reset() {
	*x = CGameRecording_PerGameSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_PerGameSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_PerGameSettings) ProtoMessage() {}

func (x *CGameRecording_PerGameSettings) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_PerGameSettings.ProtoReflect.Descriptor instead.
func (*CGameRecording_PerGameSettings) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{66}
}

func (x *CGameRecording_PerGameSettings) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CGameRecording_PerGameSettings) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *CGameRecording_PerGameSettings) GetMinutes() int32 {
	if x != nil && x.Minutes != nil {
		return *x.Minutes
	}
	return 0
}

func (x *CGameRecording_PerGameSettings) GetBitrate() int32 {
	if x != nil && x.Bitrate != nil {
		return *x.Bitrate
	}
	return 0
}

type CGameRecording_GetPerGameSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_GetPerGameSettings_Request) Reset() {
	*x = CGameRecording_GetPerGameSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetPerGameSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetPerGameSettings_Request) ProtoMessage() {}

func (x *CGameRecording_GetPerGameSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetPerGameSettings_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetPerGameSettings_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{67}
}

type CGameRecording_GetPerGameSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings []*CGameRecording_PerGameSettings `protobuf:"bytes,1,rep,name=settings" json:"settings,omitempty"`
}

func (x *CGameRecording_GetPerGameSettings_Response) Reset() {
	*x = CGameRecording_GetPerGameSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetPerGameSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetPerGameSettings_Response) ProtoMessage() {}

func (x *CGameRecording_GetPerGameSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetPerGameSettings_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetPerGameSettings_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{68}
}

func (x *CGameRecording_GetPerGameSettings_Response) GetSettings() []*CGameRecording_PerGameSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type CGameRecording_SetPerGameSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameSettings *CGameRecording_PerGameSettings `protobuf:"bytes,1,opt,name=game_settings,json=gameSettings" json:"game_settings,omitempty"`
}

func (x *CGameRecording_SetPerGameSettings_Request) Reset() {
	*x = CGameRecording_SetPerGameSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_SetPerGameSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SetPerGameSettings_Request) ProtoMessage() {}

func (x *CGameRecording_SetPerGameSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SetPerGameSettings_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_SetPerGameSettings_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{69}
}

func (x *CGameRecording_SetPerGameSettings_Request) GetGameSettings() *CGameRecording_PerGameSettings {
	if x != nil {
		return x.GameSettings
	}
	return nil
}

type CGameRecording_SetPerGameSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_SetPerGameSettings_Response) Reset() {
	*x = CGameRecording_SetPerGameSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_SetPerGameSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SetPerGameSettings_Response) ProtoMessage() {}

func (x *CGameRecording_SetPerGameSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SetPerGameSettings_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_SetPerGameSettings_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{70}
}

type CGameRecording_DeletePerGameSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gameid *uint64 `protobuf:"fixed64,1,opt,name=gameid" json:"gameid,omitempty"`
}

func (x *CGameRecording_DeletePerGameSettings_Request) Reset() {
	*x = CGameRecording_DeletePerGameSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_DeletePerGameSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_DeletePerGameSettings_Request) ProtoMessage() {}

func (x *CGameRecording_DeletePerGameSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_DeletePerGameSettings_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_DeletePerGameSettings_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{71}
}

func (x *CGameRecording_DeletePerGameSettings_Request) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

type CGameRecording_DeletePerGameSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_DeletePerGameSettings_Response) Reset() {
	*x = CGameRecording_DeletePerGameSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_DeletePerGameSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_DeletePerGameSettings_Response) ProtoMessage() {}

func (x *CGameRecording_DeletePerGameSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_DeletePerGameSettings_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_DeletePerGameSettings_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{72}
}

type CGameRecording_UploadProgress_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress *float32 `protobuf:"fixed32,1,opt,name=progress" json:"progress,omitempty"`
	ClipId   *string  `protobuf:"bytes,2,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	Eresult  *int32   `protobuf:"varint,3,opt,name=eresult" json:"eresult,omitempty"`
}

func (x *CGameRecording_UploadProgress_Notification) Reset() {
	*x = CGameRecording_UploadProgress_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_UploadProgress_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UploadProgress_Notification) ProtoMessage() {}

func (x *CGameRecording_UploadProgress_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UploadProgress_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_UploadProgress_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{73}
}

func (x *CGameRecording_UploadProgress_Notification) GetProgress() float32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CGameRecording_UploadProgress_Notification) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_UploadProgress_Notification) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

type CGameRecording_SwitchBackgroundRecordingGame_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId *uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Request) Reset() {
	*x = CGameRecording_SwitchBackgroundRecordingGame_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SwitchBackgroundRecordingGame_Request) ProtoMessage() {}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SwitchBackgroundRecordingGame_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_SwitchBackgroundRecordingGame_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{74}
}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_SwitchBackgroundRecordingGame_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Response) Reset() {
	*x = CGameRecording_SwitchBackgroundRecordingGame_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SwitchBackgroundRecordingGame_Response) ProtoMessage() {}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SwitchBackgroundRecordingGame_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_SwitchBackgroundRecordingGame_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{75}
}

type CGameRecordingDebug_AddTimelineHighlightMarker_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Icon  *string `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`
	Title *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Desc  *string `protobuf:"bytes,4,opt,name=desc" json:"desc,omitempty"`
}

func (x *CGameRecordingDebug_AddTimelineHighlightMarker_Request) Reset() {
	*x = CGameRecordingDebug_AddTimelineHighlightMarker_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingDebug_AddTimelineHighlightMarker_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingDebug_AddTimelineHighlightMarker_Request) ProtoMessage() {}

func (x *CGameRecordingDebug_AddTimelineHighlightMarker_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingDebug_AddTimelineHighlightMarker_Request.ProtoReflect.Descriptor instead.
func (*CGameRecordingDebug_AddTimelineHighlightMarker_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{76}
}

func (x *CGameRecordingDebug_AddTimelineHighlightMarker_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameRecordingDebug_AddTimelineHighlightMarker_Request) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CGameRecordingDebug_AddTimelineHighlightMarker_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CGameRecordingDebug_AddTimelineHighlightMarker_Request) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

type CGameRecordingDebug_AddTimelineHighlightMarker_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecordingDebug_AddTimelineHighlightMarker_Response) Reset() {
	*x = CGameRecordingDebug_AddTimelineHighlightMarker_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingDebug_AddTimelineHighlightMarker_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingDebug_AddTimelineHighlightMarker_Response) ProtoMessage() {}

func (x *CGameRecordingDebug_AddTimelineHighlightMarker_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingDebug_AddTimelineHighlightMarker_Response.ProtoReflect.Descriptor instead.
func (*CGameRecordingDebug_AddTimelineHighlightMarker_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{77}
}

type CGameRecordingDebug_AddTimelineTimestamp_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Title *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *CGameRecordingDebug_AddTimelineTimestamp_Request) Reset() {
	*x = CGameRecordingDebug_AddTimelineTimestamp_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingDebug_AddTimelineTimestamp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingDebug_AddTimelineTimestamp_Request) ProtoMessage() {}

func (x *CGameRecordingDebug_AddTimelineTimestamp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingDebug_AddTimelineTimestamp_Request.ProtoReflect.Descriptor instead.
func (*CGameRecordingDebug_AddTimelineTimestamp_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{78}
}

func (x *CGameRecordingDebug_AddTimelineTimestamp_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameRecordingDebug_AddTimelineTimestamp_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CGameRecordingDebug_AddTimelineTimestamp_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecordingDebug_AddTimelineTimestamp_Response) Reset() {
	*x = CGameRecordingDebug_AddTimelineTimestamp_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingDebug_AddTimelineTimestamp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingDebug_AddTimelineTimestamp_Response) ProtoMessage() {}

func (x *CGameRecordingDebug_AddTimelineTimestamp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingDebug_AddTimelineTimestamp_Response.ProtoReflect.Descriptor instead.
func (*CGameRecordingDebug_AddTimelineTimestamp_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{79}
}

type CGameRecordingDebug_AddTimelineRangeStart_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Id    *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Title *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
}

func (x *CGameRecordingDebug_AddTimelineRangeStart_Request) Reset() {
	*x = CGameRecordingDebug_AddTimelineRangeStart_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingDebug_AddTimelineRangeStart_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingDebug_AddTimelineRangeStart_Request) ProtoMessage() {}

func (x *CGameRecordingDebug_AddTimelineRangeStart_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingDebug_AddTimelineRangeStart_Request.ProtoReflect.Descriptor instead.
func (*CGameRecordingDebug_AddTimelineRangeStart_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{80}
}

func (x *CGameRecordingDebug_AddTimelineRangeStart_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameRecordingDebug_AddTimelineRangeStart_Request) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CGameRecordingDebug_AddTimelineRangeStart_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CGameRecordingDebug_AddTimelineRangeStart_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecordingDebug_AddTimelineRangeStart_Response) Reset() {
	*x = CGameRecordingDebug_AddTimelineRangeStart_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingDebug_AddTimelineRangeStart_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingDebug_AddTimelineRangeStart_Response) ProtoMessage() {}

func (x *CGameRecordingDebug_AddTimelineRangeStart_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingDebug_AddTimelineRangeStart_Response.ProtoReflect.Descriptor instead.
func (*CGameRecordingDebug_AddTimelineRangeStart_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{81}
}

type CGameRecordingDebug_AddTimelineRangeEnd_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Id    *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (x *CGameRecordingDebug_AddTimelineRangeEnd_Request) Reset() {
	*x = CGameRecordingDebug_AddTimelineRangeEnd_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingDebug_AddTimelineRangeEnd_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingDebug_AddTimelineRangeEnd_Request) ProtoMessage() {}

func (x *CGameRecordingDebug_AddTimelineRangeEnd_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingDebug_AddTimelineRangeEnd_Request.ProtoReflect.Descriptor instead.
func (*CGameRecordingDebug_AddTimelineRangeEnd_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{82}
}

func (x *CGameRecordingDebug_AddTimelineRangeEnd_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameRecordingDebug_AddTimelineRangeEnd_Request) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type CGameRecordingDebug_AddTimelineRangeEnd_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecordingDebug_AddTimelineRangeEnd_Response) Reset() {
	*x = CGameRecordingDebug_AddTimelineRangeEnd_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingDebug_AddTimelineRangeEnd_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingDebug_AddTimelineRangeEnd_Response) ProtoMessage() {}

func (x *CGameRecordingDebug_AddTimelineRangeEnd_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingDebug_AddTimelineRangeEnd_Response.ProtoReflect.Descriptor instead.
func (*CGameRecordingDebug_AddTimelineRangeEnd_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{83}
}

type CGameRecordingDebug_SetTimelineGameMode_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Mode  *uint32 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
}

func (x *CGameRecordingDebug_SetTimelineGameMode_Request) Reset() {
	*x = CGameRecordingDebug_SetTimelineGameMode_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingDebug_SetTimelineGameMode_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingDebug_SetTimelineGameMode_Request) ProtoMessage() {}

func (x *CGameRecordingDebug_SetTimelineGameMode_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingDebug_SetTimelineGameMode_Request.ProtoReflect.Descriptor instead.
func (*CGameRecordingDebug_SetTimelineGameMode_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{84}
}

func (x *CGameRecordingDebug_SetTimelineGameMode_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameRecordingDebug_SetTimelineGameMode_Request) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type CGameRecordingDebug_SetTimelineGameMode_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CGameRecordingDebug_SetTimelineGameMode_Response) Reset() {
	*x = CGameRecordingDebug_SetTimelineGameMode_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecordingDebug_SetTimelineGameMode_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingDebug_SetTimelineGameMode_Response) ProtoMessage() {}

func (x *CGameRecordingDebug_SetTimelineGameMode_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingDebug_SetTimelineGameMode_Response.ProtoReflect.Descriptor instead.
func (*CGameRecordingDebug_SetTimelineGameMode_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{85}
}

type CGameRecording_GetActiveTimelineApps_Response_App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId                  *uint64             `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	MostRecentStartTime     *uint32             `protobuf:"varint,2,opt,name=most_recent_start_time,json=mostRecentStartTime" json:"most_recent_start_time,omitempty"`
	RecordingType           *EGameRecordingType `protobuf:"varint,3,opt,name=recording_type,json=recordingType,enum=EGameRecordingType,def=0" json:"recording_type,omitempty"`
	VideoDurationSeconds    *float64            `protobuf:"fixed64,4,opt,name=video_duration_seconds,json=videoDurationSeconds" json:"video_duration_seconds,omitempty"`
	TimelineDurationSeconds *float64            `protobuf:"fixed64,5,opt,name=timeline_duration_seconds,json=timelineDurationSeconds" json:"timeline_duration_seconds,omitempty"`
	IsActive                *bool               `protobuf:"varint,6,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	FileSize                *uint64             `protobuf:"varint,7,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
}

// Default values for CGameRecording_GetActiveTimelineApps_Response_App fields.
const (
	Default_CGameRecording_GetActiveTimelineApps_Response_App_RecordingType = EGameRecordingType_k_EGameRecordingType_Unknown
)

func (x *CGameRecording_GetActiveTimelineApps_Response_App) Reset() {
	*x = CGameRecording_GetActiveTimelineApps_Response_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetActiveTimelineApps_Response_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetActiveTimelineApps_Response_App) ProtoMessage() {}

func (x *CGameRecording_GetActiveTimelineApps_Response_App) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetActiveTimelineApps_Response_App.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetActiveTimelineApps_Response_App) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CGameRecording_GetActiveTimelineApps_Response_App) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_GetActiveTimelineApps_Response_App) GetMostRecentStartTime() uint32 {
	if x != nil && x.MostRecentStartTime != nil {
		return *x.MostRecentStartTime
	}
	return 0
}

func (x *CGameRecording_GetActiveTimelineApps_Response_App) GetRecordingType() EGameRecordingType {
	if x != nil && x.RecordingType != nil {
		return *x.RecordingType
	}
	return Default_CGameRecording_GetActiveTimelineApps_Response_App_RecordingType
}

func (x *CGameRecording_GetActiveTimelineApps_Response_App) GetVideoDurationSeconds() float64 {
	if x != nil && x.VideoDurationSeconds != nil {
		return *x.VideoDurationSeconds
	}
	return 0
}

func (x *CGameRecording_GetActiveTimelineApps_Response_App) GetTimelineDurationSeconds() float64 {
	if x != nil && x.TimelineDurationSeconds != nil {
		return *x.TimelineDurationSeconds
	}
	return 0
}

func (x *CGameRecording_GetActiveTimelineApps_Response_App) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *CGameRecording_GetActiveTimelineApps_Response_App) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type CGameRecording_QueryPhases_Request_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Name  *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CGameRecording_QueryPhases_Request_Tag) Reset() {
	*x = CGameRecording_QueryPhases_Request_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_QueryPhases_Request_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_QueryPhases_Request_Tag) ProtoMessage() {}

func (x *CGameRecording_QueryPhases_Request_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_QueryPhases_Request_Tag.ProtoReflect.Descriptor instead.
func (*CGameRecording_QueryPhases_Request_Tag) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CGameRecording_QueryPhases_Request_Tag) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *CGameRecording_QueryPhases_Request_Tag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CGameRecording_QueryPhases_Response_Phase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId              *uint64                                                        `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Title               *string                                                        `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Desc                *string                                                        `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	Icon                *string                                                        `protobuf:"bytes,4,opt,name=icon" json:"icon,omitempty"`
	DateRecorded        *uint32                                                        `protobuf:"varint,5,opt,name=date_recorded,json=dateRecorded" json:"date_recorded,omitempty"`
	DurationMs          *uint64                                                        `protobuf:"varint,6,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	Tags                []*CTimelineTag                                                `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty"`
	ContainedTags       []*CTimelineTag                                                `protobuf:"bytes,8,rep,name=contained_tags,json=containedTags" json:"contained_tags,omitempty"`
	BackgroundRecording *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording `protobuf:"bytes,9,opt,name=background_recording,json=backgroundRecording" json:"background_recording,omitempty"`
	ClipIds             []string                                                       `protobuf:"bytes,10,rep,name=clip_ids,json=clipIds" json:"clip_ids,omitempty"`
	Type                *EPhaseResultType                                              `protobuf:"varint,11,opt,name=type,enum=EPhaseResultType,def=1" json:"type,omitempty"`
	StartMs             *uint64                                                        `protobuf:"varint,12,opt,name=start_ms,json=startMs" json:"start_ms,omitempty"`
	Screenshots         []uint32                                                       `protobuf:"varint,13,rep,name=screenshots" json:"screenshots,omitempty"`
	Active              *bool                                                          `protobuf:"varint,14,opt,name=active" json:"active,omitempty"`
	PhaseId             *string                                                        `protobuf:"bytes,15,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	SignificantEvents   []*CTimelineEntry                                              `protobuf:"bytes,16,rep,name=significant_events,json=significantEvents" json:"significant_events,omitempty"`
}

// Default values for CGameRecording_QueryPhases_Response_Phase fields.
const (
	Default_CGameRecording_QueryPhases_Response_Phase_Type = EPhaseResultType_k_EPhaseResultType_Automatic
)

func (x *CGameRecording_QueryPhases_Response_Phase) Reset() {
	*x = CGameRecording_QueryPhases_Response_Phase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_QueryPhases_Response_Phase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_QueryPhases_Response_Phase) ProtoMessage() {}

func (x *CGameRecording_QueryPhases_Response_Phase) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_QueryPhases_Response_Phase.ProtoReflect.Descriptor instead.
func (*CGameRecording_QueryPhases_Response_Phase) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetDateRecorded() uint32 {
	if x != nil && x.DateRecorded != nil {
		return *x.DateRecorded
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetTags() []*CTimelineTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetContainedTags() []*CTimelineTag {
	if x != nil {
		return x.ContainedTags
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetBackgroundRecording() *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording {
	if x != nil {
		return x.BackgroundRecording
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetClipIds() []string {
	if x != nil {
		return x.ClipIds
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetType() EPhaseResultType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CGameRecording_QueryPhases_Response_Phase_Type
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetStartMs() uint64 {
	if x != nil && x.StartMs != nil {
		return *x.StartMs
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetScreenshots() []uint32 {
	if x != nil {
		return x.Screenshots
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetPhaseId() string {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return ""
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetSignificantEvents() []*CTimelineEntry {
	if x != nil {
		return x.SignificantEvents
	}
	return nil
}

type CGameRecording_QueryPhases_Response_Phase_BackgroundRecording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimelineId *string `protobuf:"bytes,1,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	Offset     *uint64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	DurationMs *uint64 `protobuf:"varint,3,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
}

func (x *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) Reset() {
	*x = CGameRecording_QueryPhases_Response_Phase_BackgroundRecording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) ProtoMessage() {}

func (x *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_QueryPhases_Response_Phase_BackgroundRecording.ProtoReflect.Descriptor instead.
func (*CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{7, 0, 0}
}

func (x *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

type CGameRecording_SaveClip_Request_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimelineId *string `protobuf:"bytes,1,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	OffsetMs   *uint64 `protobuf:"varint,2,opt,name=offset_ms,json=offsetMs" json:"offset_ms,omitempty"`
}

func (x *CGameRecording_SaveClip_Request_Position) Reset() {
	*x = CGameRecording_SaveClip_Request_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_SaveClip_Request_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SaveClip_Request_Position) ProtoMessage() {}

func (x *CGameRecording_SaveClip_Request_Position) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SaveClip_Request_Position.ProtoReflect.Descriptor instead.
func (*CGameRecording_SaveClip_Request_Position) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{24, 0}
}

func (x *CGameRecording_SaveClip_Request_Position) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_SaveClip_Request_Position) GetOffsetMs() uint64 {
	if x != nil && x.OffsetMs != nil {
		return *x.OffsetMs
	}
	return 0
}

type CGameRecording_GetThumbnails_Response_Thumbnail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageData []byte  `protobuf:"bytes,1,opt,name=image_data,json=imageData" json:"image_data,omitempty"`
	Width     *uint32 `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height    *uint32 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
}

func (x *CGameRecording_GetThumbnails_Response_Thumbnail) Reset() {
	*x = CGameRecording_GetThumbnails_Response_Thumbnail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_gamerecording_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameRecording_GetThumbnails_Response_Thumbnail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetThumbnails_Response_Thumbnail) ProtoMessage() {}

func (x *CGameRecording_GetThumbnails_Response_Thumbnail) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecording_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetThumbnails_Response_Thumbnail.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetThumbnails_Response_Thumbnail) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecording_proto_rawDescGZIP(), []int{52, 0}
}

func (x *CGameRecording_GetThumbnails_Response_Thumbnail) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

func (x *CGameRecording_GetThumbnails_Response_Thumbnail) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CGameRecording_GetThumbnails_Response_Thumbnail) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

var File_webuimessages_gamerecording_proto protoreflect.FileDescriptor

var file_webuimessages_gamerecording_proto_rawDesc = []byte{
	0x0a, 0x21, 0x77, 0x65, 0x62, 0x75, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x77, 0x65, 0x62, 0x75,
	0x69, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x77, 0x65, 0x62, 0x75, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x2c,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd3, 0x03, 0x0a,
	0x2d, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x43,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70,
	0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x1a, 0xd9, 0x02, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x6f, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x19,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x44, 0x0a, 0x29, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x2a, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x2a, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a,
	0x2b, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43,
	0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x22, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x48, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x1a, 0x2f, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xfe, 0x06, 0x0a, 0x23, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0xf1, 0x05, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61,
	0x67, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x71, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x13,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x73, 0x12, 0x43,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x1c, 0x6b, 0x5f, 0x45, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x6f, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x22, 0x39, 0x0a, 0x1e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22,
	0x44, 0x0a, 0x1f, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67,
	0x68, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x4f, 0x0a, 0x2a, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x2e, 0x0a, 0x2c, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x2d, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x2b, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x29, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0xb7, 0x03, 0x0a,
	0x33, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x31, 0x6b, 0x5f, 0x45, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x10, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x58, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf2, 0x04, 0x0a, 0x0e, 0x43, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x6b, 0x5f,
	0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x30, 0x43,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22,
	0x2a, 0x0a, 0x28, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x4c, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x35, 0x43,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x6f,
	0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x68, 0x0a,
	0x32, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x36, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x2c, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x05, 0x0a, 0x1a, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd4, 0x02, 0x0a, 0x1f, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x61, 0x76, 0x65,
	0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x63,
	0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72,
	0x63, 0x43, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x1a, 0x48, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x22,
	0x59, 0x0a, 0x20, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x3c, 0x0a, 0x21, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1,
	0x01, 0x0a, 0x22, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x21, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x70,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x70, 0x34, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x70, 0x34, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8f, 0x01, 0x0a, 0x25, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x4d, 0x73, 0x22, 0x4d, 0x0a, 0x26, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x49,
	0x64, 0x22, 0x8d, 0x01, 0x0a, 0x28, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x54,
	0x6f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x22, 0x62, 0x0a, 0x29, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x54, 0x6f,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x39, 0x0a, 0x1e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x5a, 0x69, 0x70, 0x43, 0x6c, 0x69, 0x70, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64,
	0x22, 0x3c, 0x0a, 0x1f, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x5a, 0x69, 0x70, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x50, 0x61, 0x74, 0x68, 0x22, 0x8c,
	0x01, 0x0a, 0x1f, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x22, 0x53, 0x0a,
	0x20, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x04, 0x63, 0x6c,
	0x69, 0x70, 0x22, 0x73, 0x0a, 0x33, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x6d, 0x50,
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x6c, 0x0a, 0x34, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x64,
	0x54, 0x72, 0x69, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x2b, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x22, 0x49,
	0x0a, 0x2c, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x2e, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6c, 0x69, 0x70, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x2f, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x2e, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x2f, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x36,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x73, 0x22, 0x39, 0x0a, 0x37, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x41,
	0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a,
	0x2d, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x45, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a,
	0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x44, 0x0a, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x24, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x55, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x61, 0x78,
	0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x35, 0x31, 0x32, 0x52, 0x09, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x41, 0x78, 0x69, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x45, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x0a, 0x6b, 0x5f, 0x65, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x07, 0x6b, 0x5f, 0x65, 0x4a, 0x50, 0x45,
	0x47, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x25, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x58, 0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x40, 0x0a, 0x25, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x24, 0x43,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x25,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x42, 0x0a, 0x27,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x22, 0x47, 0x0a, 0x28, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x69, 0x7a, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x34, 0x0a, 0x32, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x35, 0x0a, 0x33, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x2f, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x22, 0x60, 0x0a, 0x27, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x5b, 0x0a, 0x27, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x2a, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x1e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x22, 0x2b, 0x0a, 0x29, 0x43,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x2a, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x71, 0x0a, 0x29, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x44, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x2c, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x2d,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a,
	0x2a, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x70, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4f, 0x0a, 0x34, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x35, 0x43,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x36, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x22, 0x39, 0x0a, 0x37, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e,
	0x0a, 0x30, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x33,
	0x0a, 0x31, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x31, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0x34, 0x0a, 0x32, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x2f, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x5f, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x30, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x2f, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x53,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0x32, 0x0a, 0x30, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xf6, 0x02, 0x0a, 0x12, 0x45, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12,
	0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f,
	0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x10, 0x06, 0x12,
	0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x07, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x61, 0x67, 0x10, 0x08, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10,
	0x09, 0x2a, 0x6e, 0x0a, 0x10, 0x45, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x6c,
	0x61, 0x6e, 0x6b, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x50, 0x49, 0x10,
	0x03, 0x2a, 0xd6, 0x02, 0x0a, 0x1f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x10, 0x03, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x5f,
	0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x10, 0x05, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x06, 0x2a, 0x85, 0x02, 0x0a, 0x27, 0x45,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x35, 0x0a,
	0x31, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x35, 0x0a, 0x31, 0x6b,
	0x5f, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x04, 0x2a, 0x4b, 0x0a, 0x0e, 0x45, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x10, 0x01, 0x2a,
	0x37, 0x0a, 0x17, 0x45, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x5f,
	0x65, 0x4c, 0x6f, 0x6f, 0x73, 0x65, 0x10, 0x01, 0x2a, 0x2b, 0x0a, 0x10, 0x45, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0b, 0x0a, 0x07,
	0x6b, 0x5f, 0x65, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x6b, 0x5f, 0x65,
	0x52, 0x47, 0x42, 0x10, 0x02, 0x32, 0xeb, 0x22, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x73,
	0x12, 0x2d, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x2a, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x2b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x23, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x6f, 0x75, 0x67, 0x68, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2a,
	0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x6f, 0x75, 0x67, 0x68, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x2d, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x20, 0x2e, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x61, 0x76,
	0x65, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53,
	0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x22,
	0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x70, 0x73, 0x12, 0x20, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x54, 0x6f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x29, 0x2e,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x70, 0x54, 0x6f, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6c, 0x69, 0x70, 0x54, 0x6f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c,
	0x69, 0x70, 0x12, 0x22, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c,
	0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x54,
	0x61, 0x6b, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x26, 0x2e,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x54,
	0x61, 0x6b, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x1f, 0x2e, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x5a, 0x69, 0x70, 0x43, 0x6c,
	0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x5a, 0x69, 0x70, 0x43,
	0x6c, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x26,
	0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x25, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x75, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x28, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x69, 0x7a, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x1b, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x6d,
	0x50, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x12, 0x34, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x6d, 0x50, 0x6f,
	0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x64,
	0x54, 0x72, 0x69, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x25, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x2c, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x55, 0x49, 0x4e, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x1d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x34, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e,
	0x57, 0x65, 0x62, 0x55, 0x49, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x61, 0x0a, 0x1a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x31, 0x2e,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x55, 0x49, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x70,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x55, 0x49, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69,
	0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x28, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x55, 0x49, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x2e, 0x43,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x55,
	0x49, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x55, 0x49, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x77, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x6f, 0x77, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x55, 0x49, 0x4e, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50,
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x36, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x55, 0x49, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x1c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x6e,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x33, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54,
	0x6f, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x55, 0x49, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x20, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x6f,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x2e,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x4f,
	0x70, 0x65, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x55, 0x49, 0x4e, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0x2d, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x10, 0x2e, 0x57, 0x65, 0x62, 0x55, 0x49, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x2e, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x76, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x2e, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x14, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x2c, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c,
	0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x17,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x1f, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x12, 0x37,
	0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c,
	0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x79, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x2e, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a,
	0x1d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x35,
	0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x04, 0x80,
	0x97, 0x22, 0x01, 0x32, 0xa6, 0x05, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x41,
	0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x14,
	0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x30, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x41, 0x64,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e,
	0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x13, 0x53, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x30, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x04, 0x80, 0x97, 0x22, 0x01, 0x42, 0x05, 0x48, 0x01,
	0x80, 0x01, 0x01,
}

var (
	file_webuimessages_gamerecording_proto_rawDescOnce sync.Once
	file_webuimessages_gamerecording_proto_rawDescData = file_webuimessages_gamerecording_proto_rawDesc
)

func file_webuimessages_gamerecording_proto_rawDescGZIP() []byte {
	file_webuimessages_gamerecording_proto_rawDescOnce.Do(func() {
		file_webuimessages_gamerecording_proto_rawDescData = protoimpl.X.CompressGZIP(file_webuimessages_gamerecording_proto_rawDescData)
	})
	return file_webuimessages_gamerecording_proto_rawDescData
}

var file_webuimessages_gamerecording_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_webuimessages_gamerecording_proto_msgTypes = make([]protoimpl.MessageInfo, 92)
var file_webuimessages_gamerecording_proto_goTypes = []any{
	(ETimelineEntryType)(0),                                               // 0: ETimelineEntryType
	(EPhaseResultType)(0),                                                 // 1: EPhaseResultType
	(ETimelineChangeNotificationType)(0),                                  // 2: ETimelineChangeNotificationType
	(ERecordingSessionChangeNotificationType)(0),                          // 3: ERecordingSessionChangeNotificationType
	(EDiskSpaceType)(0),                                                   // 4: EDiskSpaceType
	(EThumbnailTimePrecision)(0),                                          // 5: EThumbnailTimePrecision
	(EThumbnailFormat)(0),                                                 // 6: EThumbnailFormat
	(*CGameRecording_GetActiveTimelineApps_Request)(nil),                  // 7: CGameRecording_GetActiveTimelineApps_Request
	(*CGameRecording_GetActiveTimelineApps_Response)(nil),                 // 8: CGameRecording_GetActiveTimelineApps_Response
	(*CGameRecording_GetTimelinesForApp_Request)(nil),                     // 9: CGameRecording_GetTimelinesForApp_Request
	(*CGameRecording_GetTimelinesForApp_Response)(nil),                    // 10: CGameRecording_GetTimelinesForApp_Response
	(*CGameRecording_GetTimelinesForClip_Request)(nil),                    // 11: CGameRecording_GetTimelinesForClip_Request
	(*CGameRecording_GetTimelinesForClip_Response)(nil),                   // 12: CGameRecording_GetTimelinesForClip_Response
	(*CGameRecording_QueryPhases_Request)(nil),                            // 13: CGameRecording_QueryPhases_Request
	(*CGameRecording_QueryPhases_Response)(nil),                           // 14: CGameRecording_QueryPhases_Response
	(*CGameRecording_GetTags_Request)(nil),                                // 15: CGameRecording_GetTags_Request
	(*CGameRecording_GetTags_Response)(nil),                               // 16: CGameRecording_GetTags_Response
	(*CGameRecording_GetEnoughDiskSpace_Request)(nil),                     // 17: CGameRecording_GetEnoughDiskSpace_Request
	(*CGameRecording_GetEnoughDiskSpace_Response)(nil),                    // 18: CGameRecording_GetEnoughDiskSpace_Response
	(*CGameRecording_GetAvailableDiskSpace_Request)(nil),                  // 19: CGameRecording_GetAvailableDiskSpace_Request
	(*CGameRecording_GetAvailableDiskSpace_Response)(nil),                 // 20: CGameRecording_GetAvailableDiskSpace_Response
	(*CGameRecording_TimelineChanged_Notification)(nil),                   // 21: CGameRecording_TimelineChanged_Notification
	(*CGameRecording_RecordingSessionChanged_Notification)(nil),           // 22: CGameRecording_RecordingSessionChanged_Notification
	(*CTimelineEntry)(nil),                                                // 23: CTimelineEntry
	(*CGameRecording_TimelineEntryChanged_Notification)(nil),              // 24: CGameRecording_TimelineEntryChanged_Notification
	(*CGameRecording_LowDiskSpace_Notification)(nil),                      // 25: CGameRecording_LowDiskSpace_Notification
	(*CGameRecording_PostGameHighlightsChanged_Notification)(nil),         // 26: CGameRecording_PostGameHighlightsChanged_Notification
	(*CGameRecording_OpenOverlayToGamePhase_Notification)(nil),            // 27: CGameRecording_OpenOverlayToGamePhase_Notification
	(*CGameRecording_OpenOverlayToTimelineEvent_Notification)(nil),        // 28: CGameRecording_OpenOverlayToTimelineEvent_Notification
	(*CGameRecording_PhaseListChanged_Notification)(nil),                  // 29: CGameRecording_PhaseListChanged_Notification
	(*CGameRecording_ClipSummary)(nil),                                    // 30: CGameRecording_ClipSummary
	(*CGameRecording_SaveClip_Request)(nil),                               // 31: CGameRecording_SaveClip_Request
	(*CGameRecording_SaveClip_Response)(nil),                              // 32: CGameRecording_SaveClip_Response
	(*CGameRecording_DeleteClip_Request)(nil),                             // 33: CGameRecording_DeleteClip_Request
	(*CGameRecording_DeleteClip_Response)(nil),                            // 34: CGameRecording_DeleteClip_Response
	(*CGameRecording_ExportClip_Settings)(nil),                            // 35: CGameRecording_ExportClip_Settings
	(*CGameRecording_ExportClip_Request)(nil),                             // 36: CGameRecording_ExportClip_Request
	(*CGameRecording_ExportClip_Response)(nil),                            // 37: CGameRecording_ExportClip_Response
	(*CGameRecording_TakeScreenshot_Request)(nil),                         // 38: CGameRecording_TakeScreenshot_Request
	(*CGameRecording_TakeScreenshot_Response)(nil),                        // 39: CGameRecording_TakeScreenshot_Response
	(*CGameRecording_UploadClipToSteam_Request)(nil),                      // 40: CGameRecording_UploadClipToSteam_Request
	(*CGameRecording_UploadClipToSteam_Response)(nil),                     // 41: CGameRecording_UploadClipToSteam_Response
	(*CGameRecording_ZipClip_Request)(nil),                                // 42: CGameRecording_ZipClip_Request
	(*CGameRecording_ZipClip_Response)(nil),                               // 43: CGameRecording_ZipClip_Response
	(*CGameRecording_GetClips_Request)(nil),                               // 44: CGameRecording_GetClips_Request
	(*CGameRecording_GetClips_Response)(nil),                              // 45: CGameRecording_GetClips_Response
	(*CGameRecording_GetAndTrimPostGameHighlights_Request)(nil),           // 46: CGameRecording_GetAndTrimPostGameHighlights_Request
	(*CGameRecording_GetAndTrimPostGameHighlights_Response)(nil),          // 47: CGameRecording_GetAndTrimPostGameHighlights_Response
	(*CGameRecording_UserAddTimelineEntry_Request)(nil),                   // 48: CGameRecording_UserAddTimelineEntry_Request
	(*CGameRecording_UserAddTimelineEntry_Response)(nil),                  // 49: CGameRecording_UserAddTimelineEntry_Response
	(*CGameRecording_UserUpdateTimelineEntry_Request)(nil),                // 50: CGameRecording_UserUpdateTimelineEntry_Request
	(*CGameRecording_UserUpdateTimelineEntry_Response)(nil),               // 51: CGameRecording_UserUpdateTimelineEntry_Response
	(*CGameRecording_UserRemoveTimelineEntry_Request)(nil),                // 52: CGameRecording_UserRemoveTimelineEntry_Request
	(*CGameRecording_UserRemoveTimelineEntry_Response)(nil),               // 53: CGameRecording_UserRemoveTimelineEntry_Response
	(*CGameRecording_ManuallyDeleteRecordingsForApps_Request)(nil),        // 54: CGameRecording_ManuallyDeleteRecordingsForApps_Request
	(*CGameRecording_ManuallyDeleteRecordingsForApps_Response)(nil),       // 55: CGameRecording_ManuallyDeleteRecordingsForApps_Response
	(*CGameRecording_GetTotalDiskSpaceUsage_Request)(nil),                 // 56: CGameRecording_GetTotalDiskSpaceUsage_Request
	(*CGameRecording_GetTotalDiskSpaceUsage_Response)(nil),                // 57: CGameRecording_GetTotalDiskSpaceUsage_Response
	(*CGameRecording_GetThumbnails_Request)(nil),                          // 58: CGameRecording_GetThumbnails_Request
	(*CGameRecording_GetThumbnails_Response)(nil),                         // 59: CGameRecording_GetThumbnails_Response
	(*CGameRecording_StartRecording_Request)(nil),                         // 60: CGameRecording_StartRecording_Request
	(*CGameRecording_StartRecording_Response)(nil),                        // 61: CGameRecording_StartRecording_Response
	(*CGameRecording_StopRecording_Request)(nil),                          // 62: CGameRecording_StopRecording_Request
	(*CGameRecording_StopRecording_Response)(nil),                         // 63: CGameRecording_StopRecording_Response
	(*CGameRecording_GetRecordingSize_Request)(nil),                       // 64: CGameRecording_GetRecordingSize_Request
	(*CGameRecording_GetRecordingSize_Response)(nil),                      // 65: CGameRecording_GetRecordingSize_Response
	(*CGameRecording_CleanupBackgroundRecordings_Request)(nil),            // 66: CGameRecording_CleanupBackgroundRecordings_Request
	(*CGameRecording_CleanupBackgroundRecordings_Response)(nil),           // 67: CGameRecording_CleanupBackgroundRecordings_Response
	(*CGameRecording_GetPlatformCapabilities_Request)(nil),                // 68: CGameRecording_GetPlatformCapabilities_Request
	(*CGameRecording_GetPlatformCapabilities_Response)(nil),               // 69: CGameRecording_GetPlatformCapabilities_Response
	(*CGameRecording_ClipCreated_Notification)(nil),                       // 70: CGameRecording_ClipCreated_Notification
	(*CGameRecording_ClipDeleted_Notification)(nil),                       // 71: CGameRecording_ClipDeleted_Notification
	(*CGameRecording_ExportProgress_Notification)(nil),                    // 72: CGameRecording_ExportProgress_Notification
	(*CGameRecording_PerGameSettings)(nil),                                // 73: CGameRecording_PerGameSettings
	(*CGameRecording_GetPerGameSettings_Request)(nil),                     // 74: CGameRecording_GetPerGameSettings_Request
	(*CGameRecording_GetPerGameSettings_Response)(nil),                    // 75: CGameRecording_GetPerGameSettings_Response
	(*CGameRecording_SetPerGameSettings_Request)(nil),                     // 76: CGameRecording_SetPerGameSettings_Request
	(*CGameRecording_SetPerGameSettings_Response)(nil),                    // 77: CGameRecording_SetPerGameSettings_Response
	(*CGameRecording_DeletePerGameSettings_Request)(nil),                  // 78: CGameRecording_DeletePerGameSettings_Request
	(*CGameRecording_DeletePerGameSettings_Response)(nil),                 // 79: CGameRecording_DeletePerGameSettings_Response
	(*CGameRecording_UploadProgress_Notification)(nil),                    // 80: CGameRecording_UploadProgress_Notification
	(*CGameRecording_SwitchBackgroundRecordingGame_Request)(nil),          // 81: CGameRecording_SwitchBackgroundRecordingGame_Request
	(*CGameRecording_SwitchBackgroundRecordingGame_Response)(nil),         // 82: CGameRecording_SwitchBackgroundRecordingGame_Response
	(*CGameRecordingDebug_AddTimelineHighlightMarker_Request)(nil),        // 83: CGameRecordingDebug_AddTimelineHighlightMarker_Request
	(*CGameRecordingDebug_AddTimelineHighlightMarker_Response)(nil),       // 84: CGameRecordingDebug_AddTimelineHighlightMarker_Response
	(*CGameRecordingDebug_AddTimelineTimestamp_Request)(nil),              // 85: CGameRecordingDebug_AddTimelineTimestamp_Request
	(*CGameRecordingDebug_AddTimelineTimestamp_Response)(nil),             // 86: CGameRecordingDebug_AddTimelineTimestamp_Response
	(*CGameRecordingDebug_AddTimelineRangeStart_Request)(nil),             // 87: CGameRecordingDebug_AddTimelineRangeStart_Request
	(*CGameRecordingDebug_AddTimelineRangeStart_Response)(nil),            // 88: CGameRecordingDebug_AddTimelineRangeStart_Response
	(*CGameRecordingDebug_AddTimelineRangeEnd_Request)(nil),               // 89: CGameRecordingDebug_AddTimelineRangeEnd_Request
	(*CGameRecordingDebug_AddTimelineRangeEnd_Response)(nil),              // 90: CGameRecordingDebug_AddTimelineRangeEnd_Response
	(*CGameRecordingDebug_SetTimelineGameMode_Request)(nil),               // 91: CGameRecordingDebug_SetTimelineGameMode_Request
	(*CGameRecordingDebug_SetTimelineGameMode_Response)(nil),              // 92: CGameRecordingDebug_SetTimelineGameMode_Response
	(*CGameRecording_GetActiveTimelineApps_Response_App)(nil),             // 93: CGameRecording_GetActiveTimelineApps_Response.App
	(*CGameRecording_QueryPhases_Request_Tag)(nil),                        // 94: CGameRecording_QueryPhases_Request.Tag
	(*CGameRecording_QueryPhases_Response_Phase)(nil),                     // 95: CGameRecording_QueryPhases_Response.Phase
	(*CGameRecording_QueryPhases_Response_Phase_BackgroundRecording)(nil), // 96: CGameRecording_QueryPhases_Response.Phase.BackgroundRecording
	(*CGameRecording_SaveClip_Request_Position)(nil),                      // 97: CGameRecording_SaveClip_Request.Position
	(*CGameRecording_GetThumbnails_Response_Thumbnail)(nil),               // 98: CGameRecording_GetThumbnails_Response.Thumbnail
	(*CGameRecordingTimelineMetadata)(nil),                                // 99: CGameRecordingTimelineMetadata
	(*CTimelineTag)(nil),                                                  // 100: CTimelineTag
	(EGameRecordingType)(0),                                               // 101: EGameRecordingType
	(*CGameRecordingTimelineEvent)(nil),                                   // 102: CGameRecordingTimelineEvent
	(*WebUINoResponse)(nil),                                               // 103: WebUINoResponse
}
var file_webuimessages_gamerecording_proto_depIdxs = []int32{
	93,  // 0: CGameRecording_GetActiveTimelineApps_Response.apps:type_name -> CGameRecording_GetActiveTimelineApps_Response.App
	99,  // 1: CGameRecording_GetTimelinesForApp_Response.timelines:type_name -> CGameRecordingTimelineMetadata
	99,  // 2: CGameRecording_GetTimelinesForClip_Response.timelines:type_name -> CGameRecordingTimelineMetadata
	94,  // 3: CGameRecording_QueryPhases_Request.filter_tags:type_name -> CGameRecording_QueryPhases_Request.Tag
	95,  // 4: CGameRecording_QueryPhases_Response.phases:type_name -> CGameRecording_QueryPhases_Response.Phase
	100, // 5: CGameRecording_GetTags_Response.tags:type_name -> CTimelineTag
	2,   // 6: CGameRecording_TimelineChanged_Notification.notification_type:type_name -> ETimelineChangeNotificationType
	3,   // 7: CGameRecording_RecordingSessionChanged_Notification.notification_type:type_name -> ERecordingSessionChangeNotificationType
	101, // 8: CGameRecording_RecordingSessionChanged_Notification.recording_type:type_name -> EGameRecordingType
	0,   // 9: CTimelineEntry.type:type_name -> ETimelineEntryType
	100, // 10: CTimelineEntry.tag:type_name -> CTimelineTag
	23,  // 11: CGameRecording_TimelineEntryChanged_Notification.entry:type_name -> CTimelineEntry
	97,  // 12: CGameRecording_SaveClip_Request.start:type_name -> CGameRecording_SaveClip_Request.Position
	97,  // 13: CGameRecording_SaveClip_Request.end:type_name -> CGameRecording_SaveClip_Request.Position
	30,  // 14: CGameRecording_SaveClip_Response.summary:type_name -> CGameRecording_ClipSummary
	35,  // 15: CGameRecording_ExportClip_Request.settings:type_name -> CGameRecording_ExportClip_Settings
	30,  // 16: CGameRecording_UploadClipToSteam_Response.summary:type_name -> CGameRecording_ClipSummary
	30,  // 17: CGameRecording_GetClips_Response.clip:type_name -> CGameRecording_ClipSummary
	102, // 18: CGameRecording_GetAndTrimPostGameHighlights_Response.events:type_name -> CGameRecordingTimelineEvent
	23,  // 19: CGameRecording_UserAddTimelineEntry_Request.entry:type_name -> CTimelineEntry
	23,  // 20: CGameRecording_UserUpdateTimelineEntry_Request.entry:type_name -> CTimelineEntry
	4,   // 21: CGameRecording_GetTotalDiskSpaceUsage_Request.type:type_name -> EDiskSpaceType
	5,   // 22: CGameRecording_GetThumbnails_Request.time_precision:type_name -> EThumbnailTimePrecision
	6,   // 23: CGameRecording_GetThumbnails_Request.format:type_name -> EThumbnailFormat
	98,  // 24: CGameRecording_GetThumbnails_Response.thumbnails:type_name -> CGameRecording_GetThumbnails_Response.Thumbnail
	30,  // 25: CGameRecording_StopRecording_Response.summary:type_name -> CGameRecording_ClipSummary
	30,  // 26: CGameRecording_ClipCreated_Notification.summary:type_name -> CGameRecording_ClipSummary
	73,  // 27: CGameRecording_GetPerGameSettings_Response.settings:type_name -> CGameRecording_PerGameSettings
	73,  // 28: CGameRecording_SetPerGameSettings_Request.game_settings:type_name -> CGameRecording_PerGameSettings
	101, // 29: CGameRecording_GetActiveTimelineApps_Response.App.recording_type:type_name -> EGameRecordingType
	100, // 30: CGameRecording_QueryPhases_Response.Phase.tags:type_name -> CTimelineTag
	100, // 31: CGameRecording_QueryPhases_Response.Phase.contained_tags:type_name -> CTimelineTag
	96,  // 32: CGameRecording_QueryPhases_Response.Phase.background_recording:type_name -> CGameRecording_QueryPhases_Response.Phase.BackgroundRecording
	1,   // 33: CGameRecording_QueryPhases_Response.Phase.type:type_name -> EPhaseResultType
	23,  // 34: CGameRecording_QueryPhases_Response.Phase.significant_events:type_name -> CTimelineEntry
	7,   // 35: GameRecording.GetActiveTimelineApps:input_type -> CGameRecording_GetActiveTimelineApps_Request
	9,   // 36: GameRecording.GetTimelinesForApp:input_type -> CGameRecording_GetTimelinesForApp_Request
	11,  // 37: GameRecording.GetTimelinesForClip:input_type -> CGameRecording_GetTimelinesForClip_Request
	13,  // 38: GameRecording.QueryPhases:input_type -> CGameRecording_QueryPhases_Request
	15,  // 39: GameRecording.GetTags:input_type -> CGameRecording_GetTags_Request
	17,  // 40: GameRecording.GetEnoughDiskSpace:input_type -> CGameRecording_GetEnoughDiskSpace_Request
	19,  // 41: GameRecording.GetAvailableDiskSpace:input_type -> CGameRecording_GetAvailableDiskSpace_Request
	31,  // 42: GameRecording.SaveClip:input_type -> CGameRecording_SaveClip_Request
	33,  // 43: GameRecording.DeleteClip:input_type -> CGameRecording_DeleteClip_Request
	44,  // 44: GameRecording.GetClips:input_type -> CGameRecording_GetClips_Request
	40,  // 45: GameRecording.UploadClipToSteam:input_type -> CGameRecording_UploadClipToSteam_Request
	36,  // 46: GameRecording.ExportClip:input_type -> CGameRecording_ExportClip_Request
	38,  // 47: GameRecording.TakeScreenshot:input_type -> CGameRecording_TakeScreenshot_Request
	42,  // 48: GameRecording.ZipClip:input_type -> CGameRecording_ZipClip_Request
	60,  // 49: GameRecording.StartRecording:input_type -> CGameRecording_StartRecording_Request
	62,  // 50: GameRecording.StopRecording:input_type -> CGameRecording_StopRecording_Request
	64,  // 51: GameRecording.GetBackgroundRecordingFileSize:input_type -> CGameRecording_GetRecordingSize_Request
	66,  // 52: GameRecording.CleanupBackgroundRecordings:input_type -> CGameRecording_CleanupBackgroundRecordings_Request
	46,  // 53: GameRecording.GetAndTrimPostGameHighlights:input_type -> CGameRecording_GetAndTrimPostGameHighlights_Request
	58,  // 54: GameRecording.GetThumbnails:input_type -> CGameRecording_GetThumbnails_Request
	68,  // 55: GameRecording.GetPlatformCapabilities:input_type -> CGameRecording_GetPlatformCapabilities_Request
	21,  // 56: GameRecording.NotifyTimelineChanged:input_type -> CGameRecording_TimelineChanged_Notification
	22,  // 57: GameRecording.NotifyRecordingSessionChanged:input_type -> CGameRecording_RecordingSessionChanged_Notification
	24,  // 58: GameRecording.NotifyTimelineEntryChanged:input_type -> CGameRecording_TimelineEntryChanged_Notification
	70,  // 59: GameRecording.NotifyClipCreated:input_type -> CGameRecording_ClipCreated_Notification
	71,  // 60: GameRecording.NotifyClipDeleted:input_type -> CGameRecording_ClipDeleted_Notification
	72,  // 61: GameRecording.NotifyExportProgress:input_type -> CGameRecording_ExportProgress_Notification
	80,  // 62: GameRecording.NotifyUploadProgress:input_type -> CGameRecording_UploadProgress_Notification
	25,  // 63: GameRecording.NotifyLowDiskSpace:input_type -> CGameRecording_LowDiskSpace_Notification
	26,  // 64: GameRecording.NotifyPostGameHighlightsChanged:input_type -> CGameRecording_PostGameHighlightsChanged_Notification
	27,  // 65: GameRecording.NotifyOpenOverlayToGamePhase:input_type -> CGameRecording_OpenOverlayToGamePhase_Notification
	28,  // 66: GameRecording.NotifyOpenOverlayToTimelineEvent:input_type -> CGameRecording_OpenOverlayToTimelineEvent_Notification
	29,  // 67: GameRecording.NotifyPhaseListChanged:input_type -> CGameRecording_PhaseListChanged_Notification
	74,  // 68: GameRecording.GetPerGameSettings:input_type -> CGameRecording_GetPerGameSettings_Request
	76,  // 69: GameRecording.SetPerGameSettings:input_type -> CGameRecording_SetPerGameSettings_Request
	78,  // 70: GameRecording.DeletePerGameSettings:input_type -> CGameRecording_DeletePerGameSettings_Request
	48,  // 71: GameRecording.UserAddTimelineEntry:input_type -> CGameRecording_UserAddTimelineEntry_Request
	50,  // 72: GameRecording.UserUpdateTimelineEntry:input_type -> CGameRecording_UserUpdateTimelineEntry_Request
	52,  // 73: GameRecording.UserRemoveTimelineEntry:input_type -> CGameRecording_UserRemoveTimelineEntry_Request
	54,  // 74: GameRecording.ManuallyDeleteRecordingsForApps:input_type -> CGameRecording_ManuallyDeleteRecordingsForApps_Request
	56,  // 75: GameRecording.GetTotalDiskSpaceUsage:input_type -> CGameRecording_GetTotalDiskSpaceUsage_Request
	81,  // 76: GameRecording.SwitchBackgroundRecordingGame:input_type -> CGameRecording_SwitchBackgroundRecordingGame_Request
	83,  // 77: GameRecordingDebug.AddTimelineHighlightMarker:input_type -> CGameRecordingDebug_AddTimelineHighlightMarker_Request
	85,  // 78: GameRecordingDebug.AddTimelineTimestamp:input_type -> CGameRecordingDebug_AddTimelineTimestamp_Request
	87,  // 79: GameRecordingDebug.AddTimelineRangeStart:input_type -> CGameRecordingDebug_AddTimelineRangeStart_Request
	89,  // 80: GameRecordingDebug.AddTimelineRangeEnd:input_type -> CGameRecordingDebug_AddTimelineRangeEnd_Request
	91,  // 81: GameRecordingDebug.SetTimelineGameMode:input_type -> CGameRecordingDebug_SetTimelineGameMode_Request
	8,   // 82: GameRecording.GetActiveTimelineApps:output_type -> CGameRecording_GetActiveTimelineApps_Response
	10,  // 83: GameRecording.GetTimelinesForApp:output_type -> CGameRecording_GetTimelinesForApp_Response
	12,  // 84: GameRecording.GetTimelinesForClip:output_type -> CGameRecording_GetTimelinesForClip_Response
	14,  // 85: GameRecording.QueryPhases:output_type -> CGameRecording_QueryPhases_Response
	16,  // 86: GameRecording.GetTags:output_type -> CGameRecording_GetTags_Response
	18,  // 87: GameRecording.GetEnoughDiskSpace:output_type -> CGameRecording_GetEnoughDiskSpace_Response
	20,  // 88: GameRecording.GetAvailableDiskSpace:output_type -> CGameRecording_GetAvailableDiskSpace_Response
	32,  // 89: GameRecording.SaveClip:output_type -> CGameRecording_SaveClip_Response
	34,  // 90: GameRecording.DeleteClip:output_type -> CGameRecording_DeleteClip_Response
	45,  // 91: GameRecording.GetClips:output_type -> CGameRecording_GetClips_Response
	41,  // 92: GameRecording.UploadClipToSteam:output_type -> CGameRecording_UploadClipToSteam_Response
	37,  // 93: GameRecording.ExportClip:output_type -> CGameRecording_ExportClip_Response
	39,  // 94: GameRecording.TakeScreenshot:output_type -> CGameRecording_TakeScreenshot_Response
	43,  // 95: GameRecording.ZipClip:output_type -> CGameRecording_ZipClip_Response
	61,  // 96: GameRecording.StartRecording:output_type -> CGameRecording_StartRecording_Response
	63,  // 97: GameRecording.StopRecording:output_type -> CGameRecording_StopRecording_Response
	65,  // 98: GameRecording.GetBackgroundRecordingFileSize:output_type -> CGameRecording_GetRecordingSize_Response
	67,  // 99: GameRecording.CleanupBackgroundRecordings:output_type -> CGameRecording_CleanupBackgroundRecordings_Response
	47,  // 100: GameRecording.GetAndTrimPostGameHighlights:output_type -> CGameRecording_GetAndTrimPostGameHighlights_Response
	59,  // 101: GameRecording.GetThumbnails:output_type -> CGameRecording_GetThumbnails_Response
	69,  // 102: GameRecording.GetPlatformCapabilities:output_type -> CGameRecording_GetPlatformCapabilities_Response
	103, // 103: GameRecording.NotifyTimelineChanged:output_type -> WebUINoResponse
	103, // 104: GameRecording.NotifyRecordingSessionChanged:output_type -> WebUINoResponse
	103, // 105: GameRecording.NotifyTimelineEntryChanged:output_type -> WebUINoResponse
	103, // 106: GameRecording.NotifyClipCreated:output_type -> WebUINoResponse
	103, // 107: GameRecording.NotifyClipDeleted:output_type -> WebUINoResponse
	103, // 108: GameRecording.NotifyExportProgress:output_type -> WebUINoResponse
	103, // 109: GameRecording.NotifyUploadProgress:output_type -> WebUINoResponse
	103, // 110: GameRecording.NotifyLowDiskSpace:output_type -> WebUINoResponse
	103, // 111: GameRecording.NotifyPostGameHighlightsChanged:output_type -> WebUINoResponse
	103, // 112: GameRecording.NotifyOpenOverlayToGamePhase:output_type -> WebUINoResponse
	103, // 113: GameRecording.NotifyOpenOverlayToTimelineEvent:output_type -> WebUINoResponse
	103, // 114: GameRecording.NotifyPhaseListChanged:output_type -> WebUINoResponse
	75,  // 115: GameRecording.GetPerGameSettings:output_type -> CGameRecording_GetPerGameSettings_Response
	77,  // 116: GameRecording.SetPerGameSettings:output_type -> CGameRecording_SetPerGameSettings_Response
	79,  // 117: GameRecording.DeletePerGameSettings:output_type -> CGameRecording_DeletePerGameSettings_Response
	49,  // 118: GameRecording.UserAddTimelineEntry:output_type -> CGameRecording_UserAddTimelineEntry_Response
	51,  // 119: GameRecording.UserUpdateTimelineEntry:output_type -> CGameRecording_UserUpdateTimelineEntry_Response
	53,  // 120: GameRecording.UserRemoveTimelineEntry:output_type -> CGameRecording_UserRemoveTimelineEntry_Response
	55,  // 121: GameRecording.ManuallyDeleteRecordingsForApps:output_type -> CGameRecording_ManuallyDeleteRecordingsForApps_Response
	57,  // 122: GameRecording.GetTotalDiskSpaceUsage:output_type -> CGameRecording_GetTotalDiskSpaceUsage_Response
	82,  // 123: GameRecording.SwitchBackgroundRecordingGame:output_type -> CGameRecording_SwitchBackgroundRecordingGame_Response
	84,  // 124: GameRecordingDebug.AddTimelineHighlightMarker:output_type -> CGameRecordingDebug_AddTimelineHighlightMarker_Response
	86,  // 125: GameRecordingDebug.AddTimelineTimestamp:output_type -> CGameRecordingDebug_AddTimelineTimestamp_Response
	88,  // 126: GameRecordingDebug.AddTimelineRangeStart:output_type -> CGameRecordingDebug_AddTimelineRangeStart_Response
	90,  // 127: GameRecordingDebug.AddTimelineRangeEnd:output_type -> CGameRecordingDebug_AddTimelineRangeEnd_Response
	92,  // 128: GameRecordingDebug.SetTimelineGameMode:output_type -> CGameRecordingDebug_SetTimelineGameMode_Response
	82,  // [82:129] is the sub-list for method output_type
	35,  // [35:82] is the sub-list for method input_type
	35,  // [35:35] is the sub-list for extension type_name
	35,  // [35:35] is the sub-list for extension extendee
	0,   // [0:35] is the sub-list for field type_name
}

func init() { file_webuimessages_gamerecording_proto_init() }
func file_webuimessages_gamerecording_proto_init() {
	if File_webuimessages_gamerecording_proto != nil {
		return
	}
	file_enums_proto_init()
	file_steammessages_base_proto_init()
	file_webuimessages_base_proto_init()
	file_webuimessages_gamerecordingfiles_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_webuimessages_gamerecording_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetActiveTimelineApps_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetActiveTimelineApps_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetTimelinesForApp_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetTimelinesForApp_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetTimelinesForClip_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetTimelinesForClip_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_QueryPhases_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_QueryPhases_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetTags_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetTags_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetEnoughDiskSpace_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetEnoughDiskSpace_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetAvailableDiskSpace_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetAvailableDiskSpace_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_TimelineChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_RecordingSessionChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CTimelineEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_TimelineEntryChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_LowDiskSpace_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_PostGameHighlightsChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_OpenOverlayToGamePhase_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_OpenOverlayToTimelineEvent_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_PhaseListChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_ClipSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_SaveClip_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_SaveClip_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_DeleteClip_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_DeleteClip_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_ExportClip_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_ExportClip_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_ExportClip_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_TakeScreenshot_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_TakeScreenshot_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_UploadClipToSteam_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_UploadClipToSteam_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_ZipClip_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_ZipClip_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetClips_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetClips_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetAndTrimPostGameHighlights_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetAndTrimPostGameHighlights_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_UserAddTimelineEntry_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_UserAddTimelineEntry_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_UserUpdateTimelineEntry_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_UserUpdateTimelineEntry_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_UserRemoveTimelineEntry_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_UserRemoveTimelineEntry_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_ManuallyDeleteRecordingsForApps_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_ManuallyDeleteRecordingsForApps_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetTotalDiskSpaceUsage_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetTotalDiskSpaceUsage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetThumbnails_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetThumbnails_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_StartRecording_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_StartRecording_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_StopRecording_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_StopRecording_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetRecordingSize_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetRecordingSize_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_CleanupBackgroundRecordings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_CleanupBackgroundRecordings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetPlatformCapabilities_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetPlatformCapabilities_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_ClipCreated_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_ClipDeleted_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_ExportProgress_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_PerGameSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetPerGameSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetPerGameSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_SetPerGameSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_SetPerGameSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_DeletePerGameSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_DeletePerGameSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_UploadProgress_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_SwitchBackgroundRecordingGame_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_SwitchBackgroundRecordingGame_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecordingDebug_AddTimelineHighlightMarker_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecordingDebug_AddTimelineHighlightMarker_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecordingDebug_AddTimelineTimestamp_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecordingDebug_AddTimelineTimestamp_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecordingDebug_AddTimelineRangeStart_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecordingDebug_AddTimelineRangeStart_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecordingDebug_AddTimelineRangeEnd_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecordingDebug_AddTimelineRangeEnd_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecordingDebug_SetTimelineGameMode_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecordingDebug_SetTimelineGameMode_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetActiveTimelineApps_Response_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_QueryPhases_Request_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_QueryPhases_Response_Phase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_QueryPhases_Response_Phase_BackgroundRecording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_SaveClip_Request_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_gamerecording_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*CGameRecording_GetThumbnails_Response_Thumbnail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_webuimessages_gamerecording_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   92,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_webuimessages_gamerecording_proto_goTypes,
		DependencyIndexes: file_webuimessages_gamerecording_proto_depIdxs,
		EnumInfos:         file_webuimessages_gamerecording_proto_enumTypes,
		MessageInfos:      file_webuimessages_gamerecording_proto_msgTypes,
	}.Build()
	File_webuimessages_gamerecording_proto = out.File
	file_webuimessages_gamerecording_proto_rawDesc = nil
	file_webuimessages_gamerecording_proto_goTypes = nil
	file_webuimessages_gamerecording_proto_depIdxs = nil
}
